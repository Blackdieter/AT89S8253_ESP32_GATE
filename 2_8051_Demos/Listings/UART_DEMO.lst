A51 MACRO ASSEMBLER  UART_DEMO                                                            11/08/2024 22:44:20 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\UART_DEMO.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE UART_DEMO.a51 SET(SMALL) DEBUG PRINT(.\Listings\UART_DEMO.lst) OBJECT(.
                      \Objects\UART_DEMO.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ;=================================================================
                       2     ;
                       3     ; Send 4 byte from r0 to r3 by UART (Chip -> Terminal)
                       4     ;
                       5     ;=================================================================
                       6     
0000                   7     ORG 0000H         ; Start program from address 0000H
                       8     
                       9     ; Step 1: Initialize registers with numbers
0000 78F9             10     MOV R0, #0xf9      ; Load 1 into R0
0002 79A4             11     MOV R1, #0xa4      ; Load 2 into R1
0004 7AB0             12     MOV R2, #0xb0       ; Load 3 into R2
0006 7B99             13     MOV R3, #0x99      ; Load 4 into R3
                      14     
                      15     ; Step 2: Call the subroutine to convert 7-segment to ASCII
0008 112F             16     ACALL SEG_TO_ASCII
                      17     
                      18     ; Step 2: Initialize UART for 9600 baud rate
000A 758920           19     MOV TMOD, #20H    ; Timer 1 in Mode 2 (8-bit auto-reload)
000D 758DFD           20     MOV TH1, #0FDH    ; Set baud rate to 9600 (assuming 11.0592 MHz clock)
0010 759850           21     MOV SCON, #50H    ; Set UART mode 1, 8-bit UART, REN enabled
0013 D28E             22     SETB TR1          ; Start Timer 1
                      23     
                      24     ; Step 3: Transmit "1234" as a string over UART
0015 E8               25     MOV A, R0         ; Move content of R0 (1) to Accumulator
0016 F599             26     MOV SBUF, A       ; Send '1' over UART
0018 1129             27     ACALL WAIT_UART   ; Wait until transmission is complete
                      28     
001A E9               29     MOV A, R1         ; Move content of R1 (2) to Accumulator
001B F599             30     MOV SBUF, A       ; Send '2' over UART
001D 1129             31     ACALL WAIT_UART   ; Wait until transmission is complete
                      32     
001F EA               33     MOV A, R2         ; Move content of R2 (3) to Accumulator
0020 F599             34     MOV SBUF, A       ; Send '3' over UART
0022 1129             35     ACALL WAIT_UART   ; Wait until transmission is complete
                      36     
0024 EB               37     MOV A, R3         ; Move content of R3 (4) to Accumulator
0025 F599             38     MOV SBUF, A       ; Send '4' over UART
0027 1129             39     ACALL WAIT_UART   ; Wait until transmission is complete
                      40     
                      41     
0029                  42     WAIT_UART:
0029 3099FD           43        JNB TI, WAIT_UART ; Wait for the TI (Transmit Interrupt) flag to set
002C C299             44        CLR TI            ; Clear TI flag for the next transmission
002E 22               45        RET               ; Return to the main program
                      46             
                      47     ; Subroutine to convert 7-segment codes to ASCII numbers
002F                  48     SEG_TO_ASCII:
002F E8               49        MOV A, R0
0030 1140             50        ACALL CONVERT_DIGIT
0032 F8               51        MOV R0, A        ; Store ASCII equivalent in R4
                      52     
0033 E9               53        MOV A, R1
0034 1140             54        ACALL CONVERT_DIGIT
0036 F9               55        MOV R1, A        ; Store ASCII equivalent in R5
                      56     
0037 EA               57        MOV A, R2
A51 MACRO ASSEMBLER  UART_DEMO                                                            11/08/2024 22:44:20 PAGE     2

0038 1140             58        ACALL CONVERT_DIGIT
003A FA               59        MOV R2, A        ; Store ASCII equivalent in R6
                      60     
003B EB               61        MOV A, R3
003C 1140             62        ACALL CONVERT_DIGIT
003E FB               63        MOV R3, A        ; Store ASCII equivalent in R7
                      64     
003F 22               65        RET              ; Return from subroutine
                      66        
                      67      ; Convert individual 7-segment code in Accumulator to ASCII
0040                  68     CONVERT_DIGIT:
0040 B4C003           69        CJNE A, #0C0H, CHECK_1    ; Check if code is for '0'
0043 7430             70        MOV A, #'0'               ; ASCII for '0'
0045 22               71        RET
                      72     
0046                  73     CHECK_1:
0046 B4F903           74        CJNE A, #0F9H, CHECK_2    ; Check if code is for '1'
0049 7431             75        MOV A, #'1'               ; ASCII for '1'
004B 22               76        RET
                      77     
004C                  78     CHECK_2:
004C B4A403           79        CJNE A, #0A4H, CHECK_3    ; Check if code is for '2'
004F 7432             80        MOV A, #'2'               ; ASCII for '2'
0051 22               81        RET
                      82     
0052                  83     CHECK_3:
0052 B4B003           84        CJNE A, #0B0H, CHECK_4    ; Check if code is for '3'
0055 7433             85        MOV A, #'3'               ; ASCII for '3'
0057 22               86        RET
                      87     
0058                  88     CHECK_4:
0058 B49903           89        CJNE A, #099H, CHECK_5    ; Check if code is for '4'
005B 7434             90        MOV A, #'4'               ; ASCII for '4'
005D 22               91        RET
                      92     
005E                  93     CHECK_5:
005E B49203           94        CJNE A, #092H, CHECK_6    ; Check if code is for '5'
0061 7435             95        MOV A, #'5'               ; ASCII for '5'
0063 22               96        RET
                      97     
0064                  98     CHECK_6:
0064 B48203           99        CJNE A, #082H, CHECK_7    ; Check if code is for '6'
0067 7436            100        MOV A, #'6'               ; ASCII for '6'
0069 22              101        RET
                     102     
006A                 103     CHECK_7:
006A B4F803          104        CJNE A, #0F8H, CHECK_8    ; Check if code is for '7'
006D 7437            105        MOV A, #'7'               ; ASCII for '7'
006F 22              106        RET
                     107     
0070                 108     CHECK_8:
0070 B48003          109        CJNE A, #080H, CHECK_9    ; Check if code is for '8'
0073 7438            110        MOV A, #'8'               ; ASCII for '8'
0075 22              111        RET
                     112     
0076                 113     CHECK_9:
0076 B49003          114        CJNE A, #090H, ERROR      ; Check if code is for '9'
0079 7439            115        MOV A, #'9'               ; ASCII for '9'
007B 22              116        RET
                     117     
007C                 118     ERROR:
007C 743F            119        MOV A, #'?'               ; Unknown character
007E 22              120        RET
                     121     
                     122     END               ; End of program
A51 MACRO ASSEMBLER  UART_DEMO                                                            11/08/2024 22:44:20 PAGE     3

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

CHECK_1. . . . . .  C ADDR   0046H   A   
CHECK_2. . . . . .  C ADDR   004CH   A   
CHECK_3. . . . . .  C ADDR   0052H   A   
CHECK_4. . . . . .  C ADDR   0058H   A   
CHECK_5. . . . . .  C ADDR   005EH   A   
CHECK_6. . . . . .  C ADDR   0064H   A   
CHECK_7. . . . . .  C ADDR   006AH   A   
CHECK_8. . . . . .  C ADDR   0070H   A   
CHECK_9. . . . . .  C ADDR   0076H   A   
CONVERT_DIGIT. . .  C ADDR   0040H   A   
ERROR. . . . . . .  C ADDR   007CH   A   
SBUF . . . . . . .  D ADDR   0099H   A   
SCON . . . . . . .  D ADDR   0098H   A   
SEG_TO_ASCII . . .  C ADDR   002FH   A   
TH1. . . . . . . .  D ADDR   008DH   A   
TI . . . . . . . .  B ADDR   0098H.1 A   
TMOD . . . . . . .  D ADDR   0089H   A   
TR1. . . . . . . .  B ADDR   0088H.6 A   
WAIT_UART. . . . .  C ADDR   0029H   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
