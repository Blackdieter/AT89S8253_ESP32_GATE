A51 MACRO ASSEMBLER  D_INTERUPTS                                                          11/28/2024 08:12:42 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\D_INTERUPTS.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE D_INTERUPTS.a51 SET(SMALL) DEBUG PRINT(.\Listings\D_INTERUPTS.lst) OBJE
                      CT(.\Objects\D_INTERUPTS.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ;===============================================================
                       2     ; 8051 External Interrupts to Control LED on P2.6
                       3     ;===============================================================
  0080                 4     DATA_7SEG    EQU P0                 ; 7-SEGMENT DISPLAY CONNECTED TO PORT 0
  00A2                 5     LED1         BIT P2.2               ; LED1 CONTROL BIT
  00A3                 6     LED2         BIT P2.3               ; LED2 CONTROL BIT FOR ENABLING THE 2ND 7-SEGMENT
  00B2                 7     BUTTON1      BIT P3.2               ; BUTTON 1 INPUT ON PORT 3.2
  00B3                 8     BUTTON2      BIT P3.3               ; BUTTON 2 INPUT ON PORT 3.3
  00A6                 9     LED_GREEN    BIT P2.6               ; GREEN LED BIT
  00A7                10     LED_RED      BIT P2.7               ; RED LED BIT
  00A4                11     BUZZER       BIT P2.4
  0030                12     INDEX        EQU 0x30                           ; COUNT FOR NUMBER OF DIGITS ENTERED
                      13             
0000                  14     ORG 0000H           ; Reset vector
0000 8023             15     SJMP MAIN           ; Jump to main program      
0003                  16     ORG 0003H           ; External Interrupt 0 (INT0) vector
0003 8063             17     SJMP INT0_ISR       ; Jump to INT0 interrupt service routine
0013                  18     ORG 0013H           ; External Interrupt 1 (INT1) vector
0013 805F             19     SJMP INT1_ISR       ; Jump to INT1 interrupt service routine
0023                  20     ORG 23H         ; Interrupt vector for serial interrupt
0023 01B1             21     AJMP UART_ISR 
                      22     
                      23     
                      24     ;===============================================================
                      25     ; Main Program
                      26     ;===============================================================
0025                  27     MAIN:
0025 75A000           28         MOV P2, #00H        ; Clear all LEDs on port 2 (initialize)
0028 D2AF             29             SETB EA             ; Enable global interrupts
                      30             
                      31             ; SETUP UART Interrupt
002A 758920           32             MOV TMOD, #20H ; Timer 1 in mode 2 (8-bit auto-reload)
002D 758DFD           33         MOV TH1, #-3   ; Baud rate 9600 for 11.0592 MHz crystal
0030 759850           34         MOV SCON, #50H ; Serial mode 1, 8-bit data, 1 stop bit, REN enabled
0033 D28E             35         SETB TR1       ; Start Timer 1
0035 D2AC             36             SETB ES        ; Enable serial interrupt
                      37             
                      38             ; SETUP external Interrupt
0037 D2A8             39         SETB EX0            ; Enable external interrupt 0 (INT0)
0039 D2AA             40         SETB EX1            ; Enable external interrupt 1 (INT1)
003B D288             41         SETB IT0            ; Configure INT0 as edge-triggered (falling edge)
003D D28A             42         SETB IT1            ; Configure INT1 as edge-triggered (falling edge)
                      43             
                      44             ; Initial default password
003F 753132           45             MOV 0x31, #'2'
0042 753231           46             MOV 0x32, #'1'
0045 753330           47             MOV 0x33, #'0'
0048 753430           48             MOV 0x34, #'0'
004B 753530           49             MOV 0x35, #'0'
004E 753630           50             MOV 0x36, #'0'
                      51             
                      52             ; CONFIGURE PINS
0051 C2A4             53         CLR BUZZER
0053 C2A7             54         CLR LED_RED
0055 C2A6             55         CLR LED_GREEN                 ; TURN OFF GREEN LED INITIALLY
                      56             
                      57             ; DISPLAY INITIAL VALUE (8) ON 7-SEGMENT
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          11/28/2024 08:12:42 PAGE     2

0057 900282           58             MOV DPTR, #MA7SEG-1           ; INITIALIZE DPTR WITH ADDRESS OF MA7SEG -1
005A 758089           59         MOV DATA_7SEG, #0x89
005D 753000           60         MOV INDEX, #0
0060 D2A3             61             SETB LED2
0062                  62     IDLE_LOOP:
0062 B2B4             63             CPL P3.4
0064 5176             64             ACALL DELAY
0066 80FA             65         SJMP IDLE_LOOP      ; Stay in an idle loop, waiting for interrupts
                      66     
                      67     ;===============================================================
                      68     ; Interrupt Service Routines
                      69     ;===============================================================
                      70     
                      71     ; INT0 Interrupt Service Routine (Accumulate the number)
0068                  72     INT0_ISR:
                      73             ;ACALL BUZZER_ON
0068 E4               74         CLR A                          ; CLEAR ACCUMULATOR
0069 A3               75         INC DPTR                       ; INCREMENT DPTR FOR NEXT VALUE
006A 93               76         MOVC A, @A+DPTR                ; LOAD NEXT PATTERN FROM MA7SEG
006B F580             77         MOV DATA_7SEG, A               ; DISPLAY NUMBER ON 7-SEGMENT
                      78         ; CHECK IF VALUE IS NOT 0x90 (9)
006D B49003           79         CJNE A, #0x90, RETURN
                      80         ; RESET DPTR TO START OF MA7SEG AFTER REACHING 9
0070 900282           81         MOV DPTR, #MA7SEG-1
0073                  82             RETURN:
0073 32               83             RETI                ; Return from interrupt
                      84     
                      85     ; INT1 Interrupt Service Routine (Control the number submitted)
0074                  86     INT1_ISR:
                      87             ;ACALL BUZZER_ON
                      88         ; SHIFT NUMBERS IN REGISTERS TO MAKE ROOM FOR NEW VALUE IN R0
0074 EC               89         MOV A, R4
0075 FD               90         MOV R5, A                     ; MOVE PREVIOUS R4 TO R5
0076 EB               91         MOV A, R3
0077 FC               92         MOV R4, A                     ; MOVE PREVIOUS R3 TO R4
0078 EA               93         MOV A, R2
0079 FB               94         MOV R3, A                     ; MOVE PREVIOUS R2 TO R3
007A E9               95         MOV A, R1
007B FA               96         MOV R2, A                     ; MOVE PREVIOUS R1 TO R2
007C E8               97         MOV A, R0
007D F9               98         MOV R1, A                     ; MOVE PREVIOUS R0 TO R1
007E A880             99         MOV R0, DATA_7SEG             ; STORE NEW NUMBER IN R0
                     100             ; DISPLAY NUMBER 0 ON 7-SEGMENT
0080 E4              101         CLR A
0081 900283          102         MOV DPTR, #MA7SEG             ; RESET DPTR TO START OF MA7SEG
0084 93              103         MOVC A, @A+DPTR
0085 F580            104         MOV DATA_7SEG, A              ; DISPLAY NEXT VALUE ON 7-SEGMENT
0087 11D1            105             ACALL CHECK_INDEX                         ; DISPLAY THE LED FOR SUBMITTED VALUE
0089 B2A7            106             CPL LED_RED                   ; Turn OFF LED connected to P2.6
                     107         ; CHECK IF INDEX IS 6
008B 0530            108         INC INDEX
008D E530            109         MOV A, INDEX
008F B4061E          110         CJNE A, #6, EXIT_1ISR              ; IF NOT, GO BACK TO LOOP
0092 3146            111             ACALL SEG_TO_ASCII
                     112         ; TRANSMIT "****" AS STRING OVER UART
0094 ED              113             MOV A, R5                     ; SEND 1 OVER UART
0095 31FF            114         ACALL SEND_CHAR
0097 EC              115         MOV A, R4                     ; SEND 2 OVER UART
0098 31FF            116         ACALL SEND_CHAR
009A EB              117         MOV A, R3                     ; SEND 3 OVER UART
009B 31FF            118         ACALL SEND_CHAR
009D EA              119         MOV A, R2                     ; SEND 4 OVER UART
009E 31FF            120         ACALL SEND_CHAR
00A0 E9              121         MOV A, R1                     ; SEND 5 OVER UART
00A1 31FF            122         ACALL SEND_CHAR
00A3 E8              123         MOV A, R0                     ; SEND 6 OVER UART
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          11/28/2024 08:12:42 PAGE     3

00A4 31FF            124         ACALL SEND_CHAR
00A6 740D            125             MOV A, #0x0D                ; Load ASCII for Carriage Return (CR)               
00A8 31FF            126             ACALL SEND_CHAR             ; Send CR via UART
00AA 740A            127             MOV A, #0x0A                ; Load ASCII for Line Feed (LF)
00AC 31FF            128             ACALL SEND_CHAR             ; Send LF via UART
                     129             ; Check with out password
00AE 11F7            130             ACALL CHEKC_PASSWORD            
00B0                 131             EXIT_1ISR:
00B0 32              132             RETI                ; Return from interrupt
                     133             
00B1                 134     UART_ISR:
00B1 319E            135             ACALL RECEIVE_CHAR     ; Get character from UART
00B3 B4501A          136             CJNE A, #'P', EXIT_ISR ; If not 'P', exit
                     137             ;CPL LED_RED                       ; For debug
                     138     
                     139             ; 'P' detected, proceed to receive next 4 characters
00B6 319E            140             ACALL RECEIVE_CHAR     ; Get first number
00B8 F531            141             MOV 0x31, A              ; Store in R0
00BA 319E            142             ACALL RECEIVE_CHAR     ; Get second number
00BC F532            143             MOV 0x32, A              ; Store in R1
00BE 319E            144             ACALL RECEIVE_CHAR     ; Get third number
00C0 F533            145             MOV 0x33, A              ; Store in R2
00C2 319E            146             ACALL RECEIVE_CHAR     ; Get fourth number
00C4 F534            147             MOV     0x34, A              ; Store in R3
00C6 319E            148             ACALL RECEIVE_CHAR     ; Get third number
00C8 F535            149             MOV 0x35, A              ; Store in R4
00CA 319E            150             ACALL RECEIVE_CHAR     ; Get fourth number
00CC F536            151             MOV     0x36, A              ; Store in R5
                     152             ; Send back received numbers over UART
00CE 31A6            153             ACALL SEND_RESPONSE
00D0                 154             EXIT_ISR:
                     155             ;CPL LED_GREEN ; For debug, if not P is inserted
00D0 32              156             RETI        ; Return from interrupt
                     157             
                     158     ;===============================================================
                     159     ; Logical check subrotines
                     160     ;===============================================================
00D1                 161             CHECK_INDEX:    ; Control the indicate led by the index
                     162                     ; Compare index with 0
00D1 E530            163                     MOV A, index            ; Load the value of index into the accumulator
00D3 B40003          164                     CJNE A, #0, CHECK_1L     ; If index ? 0, jump to CHECK_1
00D6 C292            165                     CLR P1.2               ; Set P1.2 if index = 0
00D8 22              166                     RET                     ; Return from subroutine
00D9                 167                     CHECK_1L:
00D9 B40103          168                     CJNE A, #1, CHECK_2L     ; If index ? 1, jump to CHECK_2
00DC C293            169                     CLR P1.3               ; Set P1.3 if index = 1
00DE 22              170                     RET                     ; Return from subroutine
00DF                 171                     CHECK_2L:
00DF B40203          172                     CJNE A, #2, CHECK_3L     ; If index ? 2, jump to CHECK_3
00E2 C294            173                     CLR P1.4               ; Set P1.4 if index = 2
00E4 22              174                     RET                     ; Return from subroutine
00E5                 175                     CHECK_3L:
00E5 B40303          176                     CJNE A, #3, CHECK_4L     ; If index ? 2, jump to CHECK_3
00E8 C295            177                     CLR P1.5               ; Set P1.4 if index = 2
00EA 22              178                     RET                     ; Return from subroutine
00EB                 179                     CHECK_4L:
00EB B40403          180                     CJNE A, #4, CHECK_5L     ; If index ? 2, jump to CHECK_3
00EE C296            181                     CLR P1.6               ; Set P1.4 if index = 2
00F0 22              182                     RET                     ; Return from subroutine
00F1                 183                     CHECK_5L:
00F1 B40502          184                     CJNE A, #5, END_CHECKL   ; If index ? 3, jump to END_CHECK
00F4 C297            185                     CLR P1.7               ; Set P1.5 if index = 3
00F6                 186                     END_CHECKL:
00F6 22              187                     RET                     ; Return from subroutine
                     188                     
00F7                 189             CHEKC_PASSWORD: ; CHECK EACH REGISTER AGAINST PASSWORD  
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          11/28/2024 08:12:42 PAGE     4

00F7 ED              190                     MOV A, R5
00F8 8531F0          191                     MOV B,0x31
00FB B5F031          192                     CJNE A, B, INCORRECT
00FE EC              193                     MOV A, R4
00FF 8532F0          194                     MOV B,0x32
0102 B5F02A          195                     CJNE A, B, INCORRECT
0105 EB              196                     MOV A, R3
0106 8533F0          197                     MOV B,0x33
0109 B5F023          198                     CJNE A, B, INCORRECT
010C EA              199                     MOV A, R2
010D 8534F0          200                     MOV B,0x34
0110 B5F01C          201                     CJNE A, B, INCORRECT
0113 E9              202                     MOV A, R1
0114 8535F0          203                     MOV B,0x35
0117 B5F015          204                     CJNE A, B, INCORRECT
011A E8              205                     MOV A, R0
011B 8536F0          206                     MOV B,0x36
011E B5F00E          207                     CJNE A, B, INCORRECT
0121                 208                             CORRECT:
0121 C2A7            209                             CLR LED_RED                  ; TURN OFF RED LED
0123 D2A6            210                             SETB LED_GREEN               ; TURN ON GREEN LED
0125 5107            211                             ACALL DISPLAY_PASSWORD
0127 5160            212                             ACALL BUZZER_ON
0129 5160            213                             ACALL BUZZER_ON
012B 5160            214                             ACALL BUZZER_ON
012D 800A            215                             SJMP RESET
012F                 216                             INCORRECT:
012F C2A6            217                             CLR LED_GREEN                ; TURN OFF GREEN LED
0131 D2A7            218                             SETB LED_RED                 ; TURN ON RED LED
0133 5160            219                             ACALL BUZZER_ON
0135 5160            220                             ACALL BUZZER_ON
0137 8000            221                             SJMP RESET
0139                 222                             RESET:          
0139 753000          223                             MOV INDEX, #0                ; RESET INDEX FOR NEXT ENTRY
013C 7590FF          224                             MOV P1, #0xFF                             ; TURN ON ALL SUBMITTED L
                             ED
013F 758089          225                             MOV DATA_7SEG, #0x89
0142 900282          226                             MOV DPTR, #MA7SEG-1           ; INITIALIZE DPTR WITH ADDRESS OF MA7
                             SEG -1
0145 22              227                     RET
                     228                     
                     229     ;===============================================================
                     230     ; Convert subrotines
                     231     ;===============================================================
0146                 232             SEG_TO_ASCII:   ; Convert 7seg led to ascii
0146 E8              233                     MOV A, R0
0147 315F            234                     ACALL CONVERT_DIGIT
0149 F8              235                     MOV R0, A
014A E9              236                     MOV A, R1
014B 315F            237                     ACALL CONVERT_DIGIT
014D F9              238                     MOV R1, A
014E EA              239                     MOV A, R2
014F 315F            240                     ACALL CONVERT_DIGIT
0151 FA              241                     MOV R2, A
0152 EB              242                     MOV A, R3
0153 315F            243                     ACALL CONVERT_DIGIT
0155 FB              244                     MOV R3, A
0156 EC              245                     MOV A, R4
0157 315F            246                     ACALL CONVERT_DIGIT
0159 FC              247                     MOV R4, A
015A ED              248                     MOV A, R5
015B 315F            249                     ACALL CONVERT_DIGIT
015D FD              250                     MOV R5, A
015E 22              251                     RET
                     252     
015F                 253             CONVERT_DIGIT:
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          11/28/2024 08:12:42 PAGE     5

015F B4C003          254                     CJNE A, #0C0H, CHECK_1
0162 7430            255                     MOV A, #'0'
0164 22              256                     RET
0165                 257                     CHECK_1:
0165 B4F903          258                     CJNE A, #0F9H, CHECK_2
0168 7431            259                     MOV A, #'1'
016A 22              260                     RET
016B                 261                     CHECK_2:
016B B4A403          262                     CJNE A, #0A4H, CHECK_3
016E 7432            263                     MOV A, #'2'
0170 22              264                     RET
0171                 265                     CHECK_3:
0171 B4B003          266                     CJNE A, #0B0H, CHECK_4
0174 7433            267                     MOV A, #'3'
0176 22              268                     RET
0177                 269                     CHECK_4:
0177 B49903          270                     CJNE A, #099H, CHECK_5
017A 7434            271                     MOV A, #'4'
017C 22              272                     RET
017D                 273                     CHECK_5:
017D B49203          274                     CJNE A, #092H, CHECK_6
0180 7435            275                     MOV A, #'5'
0182 22              276                     RET
0183                 277                     CHECK_6:
0183 B48203          278                     CJNE A, #082H, CHECK_7
0186 7436            279                     MOV A, #'6'
0188 22              280                     RET
0189                 281                     CHECK_7:
0189 B4F803          282                     CJNE A, #0F8H, CHECK_8
018C 7437            283                     MOV A, #'7'
018E 22              284                     RET
018F                 285                     CHECK_8:
018F B48003          286                     CJNE A, #080H, CHECK_9
0192 7438            287                     MOV A, #'8'
0194 22              288                     RET
0195                 289                     CHECK_9:
0195 B49003          290                     CJNE A, #090H, ERROR
0198 7439            291                     MOV A, #'9'
019A 22              292                     RET
019B                 293                     ERROR:
019B 743F            294                     MOV A, #'?'
019D 22              295                     RET
                     296                             
                     297     ;===============================================================
                     298     ; Write and display subrotines
                     299     ;===============================================================
019E                 300             RECEIVE_CHAR:
019E 3098FD          301                     JNB RI, RECEIVE_CHAR   ; Wait until a character is received
01A1 E599            302                     MOV A, SBUF            ; Move received byte to Accumulator
01A3 C298            303                     CLR RI                 ; Clear RI for next reception
01A5 22              304                     RET
                     305             
01A6                 306             SEND_RESPONSE:
01A6 744E            307                     MOV A, #'N'                 ; Load ASCII of 'N' into A
01A8 31FF            308                     ACALL SEND_CHAR             ; Send character via UART
01AA 7445            309                     MOV A, #'E'                 ; Load ASCII of 'E' into A
01AC 31FF            310                     ACALL SEND_CHAR             ; Send character via UART
01AE 7457            311                     MOV A, #'W'                 ; Load ASCII of 'W' into A
01B0 31FF            312                     ACALL SEND_CHAR             ; Send character via UART
01B2 7420            313                     MOV A, #' '                 ; Load ASCII of space into A
01B4 31FF            314                     ACALL SEND_CHAR             ; Send character via UART
01B6 7450            315                     MOV A, #'P'                 ; Load ASCII of 'P' into A
01B8 31FF            316                     ACALL SEND_CHAR             ; Send character via UART
01BA 7441            317                     MOV A, #'A'                 ; Load ASCII of 'A' into A
01BC 31FF            318                     ACALL SEND_CHAR             ; Send character via UART
01BE 7453            319                     MOV A, #'S'                 ; Load ASCII of 'S' into A
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          11/28/2024 08:12:42 PAGE     6

01C0 31FF            320                     ACALL SEND_CHAR             ; Send character via UART
01C2 7453            321                     MOV A, #'S'                 ; Load ASCII of 'S' into A
01C4 31FF            322                     ACALL SEND_CHAR             ; Send character via UART
01C6 7457            323                     MOV A, #'W'                 ; Load ASCII of 'W' into A
01C8 31FF            324                     ACALL SEND_CHAR             ; Send character via UART
01CA 744F            325                     MOV A, #'O'                 ; Load ASCII of 'O' into A
01CC 31FF            326                     ACALL SEND_CHAR             ; Send character via UART
01CE 7452            327                     MOV A, #'R'                 ; Load ASCII of 'R' into A
01D0 31FF            328                     ACALL SEND_CHAR             ; Send character via UART
01D2 7444            329                     MOV A, #'D'                 ; Load ASCII of 'D' into A
01D4 31FF            330                     ACALL SEND_CHAR             ; Send character via UART
01D6 743A            331                     MOV A, #':'                 ; Load ASCII of ':' into A
01D8 31FF            332                     ACALL SEND_CHAR             ; Send character via UART
01DA 7420            333                     MOV A, #' '                 ; Load ASCII of space into A
01DC 31FF            334                     ACALL SEND_CHAR             ; Send character via UART
01DE E531            335                     MOV A, 0x31              ; Load first digit
01E0 31FF            336                     ACALL SEND_CHAR        ; Send character
01E2 E532            337                     MOV A, 0x32              ; Load second digit
01E4 31FF            338                     ACALL SEND_CHAR        ; Send character
01E6 E533            339                     MOV A, 0x33            ; Load third digit
01E8 31FF            340                     ACALL SEND_CHAR        ; Send character
01EA E534            341                     MOV A, 0x34              ; Load fourth digit
01EC 31FF            342                     ACALL SEND_CHAR        ; Send character 
01EE E535            343                     MOV A, 0x35              ; Load fourth digit
01F0 31FF            344                     ACALL SEND_CHAR        ; Send character
01F2 E536            345                     MOV A, 0x36              ; Load fourth digit
01F4 31FF            346                     ACALL SEND_CHAR        ; Send character
01F6 740D            347                     MOV A, #0x0D                ; Load ASCII for Carriage Return (CR)          
                                  
01F8 31FF            348                     ACALL SEND_CHAR             ; Send CR via UART
01FA 740A            349                     MOV A, #0x0A                ; Load ASCII for Line Feed (LF)
01FC 31FF            350                     ACALL SEND_CHAR             ; Send LF via UART
01FE 22              351                     RET
                     352             
01FF                 353             SEND_CHAR:
01FF F599            354                     MOV SBUF, A            ; Load A into SBUF to transmit
0201 3099FD          355                     JNB TI, $              ; Wait for transmission to complete
0204 C299            356                     CLR TI                 ; Clear transmit interrupt flag
0206 22              357                     RET
                     358             
0207                 359             DISPLAY_PASSWORD:
0207 7450            360                     MOV A, #'P'                 ; Load ASCII of 'P' into A
0209 31FF            361                     ACALL SEND_CHAR             ; Send character via UART
020B 7441            362                     MOV A, #'A'                 ; Load ASCII of 'A' into A
020D 31FF            363                     ACALL SEND_CHAR             ; Send character via UART
020F 7453            364                     MOV A, #'S'                 ; Load ASCII of 'S' into A
0211 31FF            365                     ACALL SEND_CHAR             ; Send character via UART
0213 7453            366                     MOV A, #'S'                 ; Load ASCII of 'S' into A
0215 31FF            367                     ACALL SEND_CHAR             ; Send character via UART
0217 7457            368                     MOV A, #'W'                 ; Load ASCII of 'W' into A
0219 31FF            369                     ACALL SEND_CHAR             ; Send character via UART
021B 744F            370                     MOV A, #'O'                 ; Load ASCII of 'O' into A
021D 31FF            371                     ACALL SEND_CHAR             ; Send character via UART
021F 7452            372                     MOV A, #'R'                 ; Load ASCII of 'R' into A
0221 31FF            373                     ACALL SEND_CHAR             ; Send character via UART
0223 7444            374                     MOV A, #'D'                 ; Load ASCII of 'D' into A
0225 31FF            375                     ACALL SEND_CHAR             ; Send character via UART
0227 7420            376                     MOV A, #' '                 ; Load ASCII of space into A
0229 31FF            377                     ACALL SEND_CHAR             ; Send character via UART
022B 7449            378                     MOV A, #'I'                 ; Load ASCII of 'I' into A
022D 31FF            379                     ACALL SEND_CHAR             ; Send character via UART
022F 7453            380                     MOV A, #'S'                 ; Load ASCII of 'S' into A
0231 31FF            381                     ACALL SEND_CHAR             ; Send character via UART
0233 743A            382                     MOV A, #':'                 ; Load ASCII of ':' into A
0235 31FF            383                     ACALL SEND_CHAR             ; Send character via UART
0237 7420            384                     MOV A, #' '                 ; Load ASCII of space into A
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          11/28/2024 08:12:42 PAGE     7

0239 31FF            385                     ACALL SEND_CHAR             ; Send character via UART
023B E531            386                     MOV A,0x31
023D 31FF            387                     ACALL SEND_CHAR
023F E532            388                     MOV A,0x32
0241 31FF            389                     ACALL SEND_CHAR
0243 E533            390                     MOV A,0x33
0245 31FF            391                     ACALL SEND_CHAR 
0247 E534            392                     MOV A,0x34
0249 31FF            393                     ACALL SEND_CHAR
024B E535            394                     MOV A,0x35              ; Load fourth digit
024D 31FF            395                     ACALL SEND_CHAR        ; Send character
024F E536            396                     MOV A,0x36              ; Load fourth digit
0251 31FF            397                     ACALL SEND_CHAR        ; Send character
0253 7420            398                     MOV A, #' '
0255 31FF            399                     ACALL SEND_CHAR
0257 740D            400                     MOV A, #0x0D                ; Load ASCII for Carriage Return (CR)          
                                  
0259 31FF            401                     ACALL SEND_CHAR             ; Send CR via UART
025B 740A            402                     MOV A, #0x0A                ; Load ASCII for Line Feed (LF)
025D 31FF            403                     ACALL SEND_CHAR             ; Send LF via UART
025F 22              404                     RET     
                     405                             
                     406     ;===============================================================
                     407     ; Delay subrotines
                     408     ;===============================================================
0260                 409     BUZZER_ON:
0260 D2A4            410             SETB BUZZER
0262 5169            411             ACALL DELAY_B
0264 C2A4            412             CLR BUZZER
0266 5169            413             ACALL DELAY_B
0268 22              414             RET
0269                 415     DELAY_B:
0269 7F02            416                     MOV R7, #2                      ; (1/20)*1 ms
026B 7EFA            417             DB1:MOV R6, #250
026D 7DFA            418             DB2:MOV R5, #250
026F DDFE            419             DB3:DJNZ R5, DB3
0271 DEFA            420                     DJNZ R6, DB2
0273 DFF6            421                     DJNZ R7, DB1
0275 22              422                     RET
0276                 423     DELAY:
0276 7F04            424                     MOV R7, #4                      ; (4/20)*1 ms
0278 7EFA            425             D1: MOV R6, #250
027A 7DFA            426             D2: MOV R5, #250
027C DDFE            427             D3: DJNZ R5, D3
027E DEFA            428                     DJNZ R6, D2
0280 DFF6            429                     DJNZ R7, D1
0282 22              430                     RET
                     431     
0283                 432     MA7SEG:
0283 C0F9A4B0        433         DB 0C0H, 0F9H, 0A4H, 0B0H, 099H, 092H, 082H, 0F8H, 080H, 090H
0287 999282F8                
028B 8090                    
                     434     END
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          11/28/2024 08:12:42 PAGE     8

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

B. . . . . . . . .  D ADDR   00F0H   A   
BUTTON1. . . . . .  B ADDR   00B0H.2 A   
BUTTON2. . . . . .  B ADDR   00B0H.3 A   
BUZZER . . . . . .  B ADDR   00A0H.4 A   
BUZZER_ON. . . . .  C ADDR   0260H   A   
CHECK_1. . . . . .  C ADDR   0165H   A   
CHECK_1L . . . . .  C ADDR   00D9H   A   
CHECK_2. . . . . .  C ADDR   016BH   A   
CHECK_2L . . . . .  C ADDR   00DFH   A   
CHECK_3. . . . . .  C ADDR   0171H   A   
CHECK_3L . . . . .  C ADDR   00E5H   A   
CHECK_4. . . . . .  C ADDR   0177H   A   
CHECK_4L . . . . .  C ADDR   00EBH   A   
CHECK_5. . . . . .  C ADDR   017DH   A   
CHECK_5L . . . . .  C ADDR   00F1H   A   
CHECK_6. . . . . .  C ADDR   0183H   A   
CHECK_7. . . . . .  C ADDR   0189H   A   
CHECK_8. . . . . .  C ADDR   018FH   A   
CHECK_9. . . . . .  C ADDR   0195H   A   
CHECK_INDEX. . . .  C ADDR   00D1H   A   
CHEKC_PASSWORD . .  C ADDR   00F7H   A   
CONVERT_DIGIT. . .  C ADDR   015FH   A   
CORRECT. . . . . .  C ADDR   0121H   A   
D1 . . . . . . . .  C ADDR   0278H   A   
D2 . . . . . . . .  C ADDR   027AH   A   
D3 . . . . . . . .  C ADDR   027CH   A   
DATA_7SEG. . . . .  D ADDR   0080H   A   
DB1. . . . . . . .  C ADDR   026BH   A   
DB2. . . . . . . .  C ADDR   026DH   A   
DB3. . . . . . . .  C ADDR   026FH   A   
DELAY. . . . . . .  C ADDR   0276H   A   
DELAY_B. . . . . .  C ADDR   0269H   A   
DISPLAY_PASSWORD .  C ADDR   0207H   A   
EA . . . . . . . .  B ADDR   00A8H.7 A   
END_CHECKL . . . .  C ADDR   00F6H   A   
ERROR. . . . . . .  C ADDR   019BH   A   
ES . . . . . . . .  B ADDR   00A8H.4 A   
EX0. . . . . . . .  B ADDR   00A8H.0 A   
EX1. . . . . . . .  B ADDR   00A8H.2 A   
EXIT_1ISR. . . . .  C ADDR   00B0H   A   
EXIT_ISR . . . . .  C ADDR   00D0H   A   
IDLE_LOOP. . . . .  C ADDR   0062H   A   
INCORRECT. . . . .  C ADDR   012FH   A   
INDEX. . . . . . .  N NUMB   0030H   A   
INT0_ISR . . . . .  C ADDR   0068H   A   
INT1_ISR . . . . .  C ADDR   0074H   A   
IT0. . . . . . . .  B ADDR   0088H.0 A   
IT1. . . . . . . .  B ADDR   0088H.2 A   
LED1 . . . . . . .  B ADDR   00A0H.2 A   
LED2 . . . . . . .  B ADDR   00A0H.3 A   
LED_GREEN. . . . .  B ADDR   00A0H.6 A   
LED_RED. . . . . .  B ADDR   00A0H.7 A   
MA7SEG . . . . . .  C ADDR   0283H   A   
MAIN . . . . . . .  C ADDR   0025H   A   
P0 . . . . . . . .  D ADDR   0080H   A   
P1 . . . . . . . .  D ADDR   0090H   A   
P2 . . . . . . . .  D ADDR   00A0H   A   
P3 . . . . . . . .  D ADDR   00B0H   A   
RECEIVE_CHAR . . .  C ADDR   019EH   A   
RESET. . . . . . .  C ADDR   0139H   A   
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          11/28/2024 08:12:42 PAGE     9

RETURN . . . . . .  C ADDR   0073H   A   
RI . . . . . . . .  B ADDR   0098H.0 A   
SBUF . . . . . . .  D ADDR   0099H   A   
SCON . . . . . . .  D ADDR   0098H   A   
SEG_TO_ASCII . . .  C ADDR   0146H   A   
SEND_CHAR. . . . .  C ADDR   01FFH   A   
SEND_RESPONSE. . .  C ADDR   01A6H   A   
TH1. . . . . . . .  D ADDR   008DH   A   
TI . . . . . . . .  B ADDR   0098H.1 A   
TMOD . . . . . . .  D ADDR   0089H   A   
TR1. . . . . . . .  B ADDR   0088H.6 A   
UART_ISR . . . . .  C ADDR   00B1H   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
