A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/07/2024 14:04:57 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\D_INTERUPTS.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE D_INTERUPTS.a51 SET(SMALL) DEBUG PRINT(.\Listings\D_INTERUPTS.lst) OBJE
                      CT(.\Objects\D_INTERUPTS.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ;===============================================================
                       2     ; 8051 External Interrupts to Control LED on P2.6
                       3     ;===============================================================
  0090                 4     DATA_7SEG    EQU P1                 ; 7-SEGMENT DISPLAY CONNECTED TO PORT 0
  00C6                 5     D_CLOSE          EQU 0x0C6
  00C0                 6     D_OPEN           EQU 0x0C0
                       7             
  00B2                 8     BUTTON1      BIT P3.2               ; BUTTON 1 INPUT ON PORT 3.2
  00B3                 9     BUTTON2      BIT P3.3               ; BUTTON 2 INPUT ON PORT 3.3
  00B4                10     BUTTON3          BIT P3.4                               ; BUTTON 3 INPUT ON PORT 3.4
  00B5                11     BUZZER       BIT P3.5
  0097                12     LEN          BIT P1.7               ; LED ENABLE CONTROL BIT
                      13             
  00A0                14     PLED1            BIT P2.0
  00A1                15     PLED2            BIT P2.1
  00A2                16     PLED3            BIT P2.2
  00A3                17     PLED4            BIT P2.3
  00A4                18     PLED5            BIT P2.4
  00A5                19     PLED6            BIT P2.5
  00A6                20     LED_GREEN    BIT P2.6               ; GREEN LED BIT
  00A7                21     ELOCK        BIT P2.7               ; RED LED BIT
                      22             
  0030                23     INDEX        EQU 0x30                           ; COUNT FOR NUMBER OF DIGITS ENTERED
                      24             
0000                  25     ORG 0000H           ; Reset vector
0000 8023             26     SJMP MAIN           ; Jump to main program      
0003                  27     ORG 0003H           ; External Interrupt 0 (INT0) vector
0003 806E             28     SJMP INT0_ISR       ; Jump to INT0 interrupt service routine
0013                  29     ORG 0013H           ; External Interrupt 1 (INT1) vector
0013 806A             30     SJMP INT1_ISR       ; Jump to INT1 interrupt service routine
0023                  31     ORG 23H         ; Interrupt vector for serial interrupt
0023 01BE             32     AJMP UART_ISR 
                      33     
                      34     ;===============================================================
                      35     ; Main Program
                      36     ;===============================================================
0025                  37     MAIN:
0025 D297             38         SETB LEN        ; Turn on the led7seg
0027 D2AF             39             SETB EA             ; Enable global interrupts
                      40             
                      41             ; SETUP UART Interrupt
0029 758920           42             MOV TMOD, #20H ; Timer 1 in mode 2 (8-bit auto-reload)
002C 758DFD           43         MOV TH1, #-3   ; Baud rate 9600 for 11.0592 MHz crystal
002F 759850           44         MOV SCON, #50H ; Serial mode 1, 8-bit data, 1 stop bit, REN enabled
0032 D28E             45         SETB TR1       ; Start Timer 1
0034 D2AC             46             SETB ES        ; Enable serial interrupt
                      47             
                      48             ; SETUP external Interrupt
0036 D2A8             49         SETB EX0            ; Enable external interrupt 0 (INT0)
0038 D2AA             50         SETB EX1            ; Enable external interrupt 1 (INT1)
003A D288             51         SETB IT0            ; Configure INT0 as edge-triggered (falling edge)
003C D28A             52         SETB IT1            ; Configure INT1 as edge-triggered (falling edge)
                      53             
                      54             ; Initial default password
003E 753132           55             MOV 0x31, #'2'
0041 753231           56             MOV 0x32, #'1'
0044 753330           57             MOV 0x33, #'0'
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/07/2024 14:04:57 PAGE     2

0047 753430           58             MOV 0x34, #'0'
004A 753530           59             MOV 0x35, #'0'
004D 753630           60             MOV 0x36, #'0'
                      61             
                      62             ; CONFIGURE PINS
0050 C2B5             63         CLR BUZZER
0052 C2A7             64         CLR ELOCK
0054 C2A6             65         CLR LED_GREEN                 ; TURN OFF GREEN LED INITIALLY
                      66             
                      67             ; DISPLAY INITIAL VALUE (8) ON 7-SEGMENT
0056 9002A3           68             MOV DPTR, #MA7SEG-1           ; INITIALIZE DPTR WITH ADDRESS OF MA7SEG -1
0059 7590C6           69         MOV DATA_7SEG, #D_CLOSE               ; DISPLAY THE LETTER C
005C 753000           70         MOV INDEX, #0
005F                  71     IDLE_LOOP:
005F B2B7             72             CPL P3.7
0061 30B402           73             JNB BUTTON3, BUTTON3_CHECKED
                      74             ;ACALL DELAY
0064 80F9             75             SJMP IDLE_LOOP
0066                  76             BUTTON3_CHECKED:
0066 753000           77                     MOV INDEX, #0                ; RESET INDEX FOR NEXT ENTRY
0069 75A03F           78                     MOV P2, #0x3F                             ; TURN ON ALL SUBMITTED LED
006C 7590C6           79                     MOV DATA_7SEG, #D_CLOSE
006F 9002A3           80                     MOV DPTR, #MA7SEG-1           ; INITIALIZE DPTR WITH ADDRESS OF MA7SEG -1
0072 22               81             RET
                      82     
                      83     ;===============================================================
                      84     ; Interrupt Service Routines
                      85     ;===============================================================
                      86     
                      87     ; INT0 Interrupt Service Routine (Accumulate the number)
0073                  88     INT0_ISR:
                      89             ;ACALL BUZZER_ON
0073 E4               90         CLR A                          ; CLEAR ACCUMULATOR
0074 A3               91         INC DPTR                       ; INCREMENT DPTR FOR NEXT VALUE
0075 93               92         MOVC A, @A+DPTR                ; LOAD NEXT PATTERN FROM MA7SEG
0076 F590             93         MOV DATA_7SEG, A               ; DISPLAY NUMBER ON 7-SEGMENT
                      94         ; CHECK IF VALUE IS NOT 0x90 (9)
0078 B49003           95         CJNE A, #0x90, RETURN
                      96         ; RESET DPTR TO START OF MA7SEG AFTER REACHING 9
007B 9002A3           97         MOV DPTR, #MA7SEG-1
007E                  98             RETURN:
007E 32               99             RETI                ; Return from interrupt
                     100     
                     101     ; INT1 Interrupt Service Routine (Control the number submitted)
007F                 102     INT1_ISR:
                     103             ;ACALL BUZZER_ON
                     104         ; SHIFT NUMBERS IN REGISTERS TO MAKE ROOM FOR NEW VALUE IN R0
007F EC              105         MOV A, R4
0080 FD              106         MOV R5, A                     ; MOVE PREVIOUS R4 TO R5
0081 EB              107         MOV A, R3
0082 FC              108         MOV R4, A                     ; MOVE PREVIOUS R3 TO R4
0083 EA              109         MOV A, R2
0084 FB              110         MOV R3, A                     ; MOVE PREVIOUS R2 TO R3
0085 E9              111         MOV A, R1
0086 FA              112         MOV R2, A                     ; MOVE PREVIOUS R1 TO R2
0087 E8              113         MOV A, R0
0088 F9              114         MOV R1, A                     ; MOVE PREVIOUS R0 TO R1
0089 A890            115         MOV R0, DATA_7SEG             ; STORE NEW NUMBER IN R0
                     116             ; DISPLAY NUMBER 0 ON 7-SEGMENT
008B E4              117         CLR A
008C 9002A4          118         MOV DPTR, #MA7SEG             ; RESET DPTR TO START OF MA7SEG
008F 93              119         MOVC A, @A+DPTR
0090 F590            120         MOV DATA_7SEG, A              ; DISPLAY NEXT VALUE ON 7-SEGMENT
0092 11DE            121             ACALL CHECK_INDEX                         ; DISPLAY THE LED FOR SUBMITTED VALUE
                     122         ; CHECK IF INDEX IS 6
0094 0530            123         INC INDEX
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/07/2024 14:04:57 PAGE     3

0096 E530            124         MOV A, INDEX
0098 B40622          125         CJNE A, #6, EXIT_1ISR              ; IF NOT, GO BACK TO LOOP
009B 3167            126             ACALL SEG_TO_ASCII
                     127         ; TRANSMIT "****" AS STRING OVER UART
009D 7453            128             MOV A, #'S'                    ; SEND S OVER UART
009F 5120            129         ACALL SEND_CHAR
00A1 ED              130             MOV A, R5                     ; SEND 1 OVER UART
00A2 5120            131         ACALL SEND_CHAR
00A4 EC              132         MOV A, R4                     ; SEND 2 OVER UART
00A5 5120            133         ACALL SEND_CHAR
00A7 EB              134         MOV A, R3                     ; SEND 3 OVER UART
00A8 5120            135         ACALL SEND_CHAR
00AA EA              136         MOV A, R2                     ; SEND 4 OVER UART
00AB 5120            137         ACALL SEND_CHAR
00AD E9              138         MOV A, R1                     ; SEND 5 OVER UART
00AE 5120            139         ACALL SEND_CHAR
00B0 E8              140         MOV A, R0                     ; SEND 6 OVER UART
00B1 5120            141         ACALL SEND_CHAR
00B3 740D            142             MOV A, #0x0D                ; Load ASCII for Carriage Return (CR)               
00B5 5120            143             ACALL SEND_CHAR             ; Send CR via UART
00B7 740A            144             MOV A, #0x0A                ; Load ASCII for Line Feed (LF)
00B9 5120            145             ACALL SEND_CHAR             ; Send LF via UART
                     146             ; Check with out password
00BB 3104            147             ACALL CHEKC_PASSWORD            
00BD                 148             EXIT_1ISR:
00BD 32              149             RETI                ; Return from interrupt
                     150             
00BE                 151     UART_ISR:
00BE 31BF            152             ACALL RECEIVE_CHAR     ; Get character from UART
00C0 B4231A          153             CJNE A, #'#', EXIT_ISR ; If not 'P', exit
                     154             ;CPL LED_RED                       ; For debug
                     155     
                     156             ; 'P' detected, proceed to receive next 4 characters
00C3 31BF            157             ACALL RECEIVE_CHAR     ; Get first number
00C5 F531            158             MOV 0x31, A              ; Store in R0
00C7 31BF            159             ACALL RECEIVE_CHAR     ; Get second number
00C9 F532            160             MOV 0x32, A              ; Store in R1
00CB 31BF            161             ACALL RECEIVE_CHAR     ; Get third number
00CD F533            162             MOV 0x33, A              ; Store in R2
00CF 31BF            163             ACALL RECEIVE_CHAR     ; Get fourth number
00D1 F534            164             MOV     0x34, A              ; Store in R3
00D3 31BF            165             ACALL RECEIVE_CHAR     ; Get third number
00D5 F535            166             MOV 0x35, A              ; Store in R4
00D7 31BF            167             ACALL RECEIVE_CHAR     ; Get fourth number
00D9 F536            168             MOV     0x36, A              ; Store in R5
                     169             ; Send back received numbers over UART
00DB 31C7            170             ACALL SEND_RESPONSE
00DD                 171             EXIT_ISR:
                     172             ;CPL LED_GREEN ; For debug, if not P is inserted
00DD 32              173             RETI        ; Return from interrupt
                     174             
                     175     ;===============================================================
                     176     ; Logical check subrotines
                     177     ;===============================================================
00DE                 178             CHECK_INDEX:    ; Control the indicate led by the index
                     179                     ; Compare index with 0
00DE E530            180                     MOV A, index            ; Load the value of index into the accumulator
00E0 B40003          181                     CJNE A, #0, CHECK_1L     ; If index ? 0, jump to CHECK_1
00E3 C2A0            182                     CLR PLED1               ; Set P1.2 if index = 0
00E5 22              183                     RET                     ; Return from subroutine
00E6                 184                     CHECK_1L:
00E6 B40103          185                     CJNE A, #1, CHECK_2L     ; If index ? 1, jump to CHECK_2
00E9 C2A1            186                     CLR PLED2               ; Set P1.3 if index = 1
00EB 22              187                     RET                     ; Return from subroutine
00EC                 188                     CHECK_2L:
00EC B40203          189                     CJNE A, #2, CHECK_3L     ; If index ? 2, jump to CHECK_3
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/07/2024 14:04:57 PAGE     4

00EF C2A2            190                     CLR PLED3               ; Set P1.4 if index = 2
00F1 22              191                     RET                     ; Return from subroutine
00F2                 192                     CHECK_3L:
00F2 B40303          193                     CJNE A, #3, CHECK_4L     ; If index ? 2, jump to CHECK_3
00F5 C2A3            194                     CLR PLED4               ; Set P1.4 if index = 2
00F7 22              195                     RET                     ; Return from subroutine
00F8                 196                     CHECK_4L:
00F8 B40403          197                     CJNE A, #4, CHECK_5L     ; If index ? 2, jump to CHECK_3
00FB C2A4            198                     CLR PLED5               ; Set P1.4 if index = 2
00FD 22              199                     RET                     ; Return from subroutine
00FE                 200                     CHECK_5L:
00FE B40502          201                     CJNE A, #5, END_CHECKL   ; If index ? 3, jump to END_CHECK
0101 C2A5            202                     CLR PLED6               ; Set P1.5 if index = 3
0103                 203                     END_CHECKL:
0103 22              204                     RET                     ; Return from subroutine
                     205                     
0104                 206             CHEKC_PASSWORD: ; CHECK EACH REGISTER AGAINST PASSWORD  
0104 ED              207                     MOV A, R5
0105 8531F0          208                     MOV B,0x31
0108 B5F042          209                     CJNE A, B, INCORRECT
010B EC              210                     MOV A, R4
010C 8532F0          211                     MOV B,0x32
010F B5F03B          212                     CJNE A, B, INCORRECT
0112 EB              213                     MOV A, R3
0113 8533F0          214                     MOV B,0x33
0116 B5F034          215                     CJNE A, B, INCORRECT
0119 EA              216                     MOV A, R2
011A 8534F0          217                     MOV B,0x34
011D B5F02D          218                     CJNE A, B, INCORRECT
0120 E9              219                     MOV A, R1
0121 8535F0          220                     MOV B,0x35
0124 B5F026          221                     CJNE A, B, INCORRECT
0127 E8              222                     MOV A, R0
0128 8536F0          223                     MOV B,0x36
012B B5F01F          224                     CJNE A, B, INCORRECT
012E                 225                             CORRECT:
012E D2A6            226                             SETB LED_GREEN               ; TURN ON GREEN LED
0130 7590C0          227                             MOV DATA_7SEG, #D_OPEN        ; DISPLAY OPEN
0133 5128            228                             ACALL DISPLAY_PASSWORD
0135 C297            229                             CLR LEN
0137 5181            230                             ACALL BUZZER_ON
0139 D297            231                             SETB LEN
013B 5181            232                             ACALL BUZZER_ON
013D C297            233                             CLR LEN
013F 5181            234                             ACALL BUZZER_ON
0141 D297            235                             SETB LEN
0143 C2A6            236                             CLR LED_GREEN
0145 5197            237                             ACALL DELAY
0147 5197            238                             ACALL DELAY
0149 5197            239                             ACALL DELAY
014B 800D            240                             SJMP RESET
014D                 241                             INCORRECT:
014D 7590C6          242                             MOV DATA_7SEG, #D_CLOSE       ; DISPLAY CLOSE
0150 C297            243                             CLR LEN
0152 5181            244                             ACALL BUZZER_ON
0154 D297            245                             SETB LEN
0156 5181            246                             ACALL BUZZER_ON
0158 8000            247                             SJMP RESET
015A                 248                             RESET:          
015A 753000          249                             MOV INDEX, #0                ; RESET INDEX FOR NEXT ENTRY
015D 75A03F          250                             MOV P2, #0x3F                             ; TURN ON ALL SUBMITTED L
                             ED
0160 7590C6          251                             MOV DATA_7SEG, #D_CLOSE
0163 9002A3          252                             MOV DPTR, #MA7SEG-1           ; INITIALIZE DPTR WITH ADDRESS OF MA7
                             SEG -1
0166 22              253                     RET
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/07/2024 14:04:57 PAGE     5

                     254                     
                     255     ;===============================================================
                     256     ; Convert subrotines
                     257     ;===============================================================
0167                 258             SEG_TO_ASCII:   ; Convert 7seg led to ascii
0167 E8              259                     MOV A, R0
0168 3180            260                     ACALL CONVERT_DIGIT
016A F8              261                     MOV R0, A
016B E9              262                     MOV A, R1
016C 3180            263                     ACALL CONVERT_DIGIT
016E F9              264                     MOV R1, A
016F EA              265                     MOV A, R2
0170 3180            266                     ACALL CONVERT_DIGIT
0172 FA              267                     MOV R2, A
0173 EB              268                     MOV A, R3
0174 3180            269                     ACALL CONVERT_DIGIT
0176 FB              270                     MOV R3, A
0177 EC              271                     MOV A, R4
0178 3180            272                     ACALL CONVERT_DIGIT
017A FC              273                     MOV R4, A
017B ED              274                     MOV A, R5
017C 3180            275                     ACALL CONVERT_DIGIT
017E FD              276                     MOV R5, A
017F 22              277                     RET
                     278     
0180                 279             CONVERT_DIGIT:
0180 B4C003          280                     CJNE A, #0C0H, CHECK_1
0183 7430            281                     MOV A, #'0'
0185 22              282                     RET
0186                 283                     CHECK_1:
0186 B4F903          284                     CJNE A, #0F9H, CHECK_2
0189 7431            285                     MOV A, #'1'
018B 22              286                     RET
018C                 287                     CHECK_2:
018C B4A403          288                     CJNE A, #0A4H, CHECK_3
018F 7432            289                     MOV A, #'2'
0191 22              290                     RET
0192                 291                     CHECK_3:
0192 B4B003          292                     CJNE A, #0B0H, CHECK_4
0195 7433            293                     MOV A, #'3'
0197 22              294                     RET
0198                 295                     CHECK_4:
0198 B49903          296                     CJNE A, #099H, CHECK_5
019B 7434            297                     MOV A, #'4'
019D 22              298                     RET
019E                 299                     CHECK_5:
019E B49203          300                     CJNE A, #092H, CHECK_6
01A1 7435            301                     MOV A, #'5'
01A3 22              302                     RET
01A4                 303                     CHECK_6:
01A4 B48203          304                     CJNE A, #082H, CHECK_7
01A7 7436            305                     MOV A, #'6'
01A9 22              306                     RET
01AA                 307                     CHECK_7:
01AA B4F803          308                     CJNE A, #0F8H, CHECK_8
01AD 7437            309                     MOV A, #'7'
01AF 22              310                     RET
01B0                 311                     CHECK_8:
01B0 B48003          312                     CJNE A, #080H, CHECK_9
01B3 7438            313                     MOV A, #'8'
01B5 22              314                     RET
01B6                 315                     CHECK_9:
01B6 B49003          316                     CJNE A, #090H, ERROR
01B9 7439            317                     MOV A, #'9'
01BB 22              318                     RET
01BC                 319                     ERROR:
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/07/2024 14:04:57 PAGE     6

01BC 743F            320                     MOV A, #'?'
01BE 22              321                     RET
                     322                             
                     323     ;===============================================================
                     324     ; Write and display subrotines
                     325     ;===============================================================
01BF                 326             RECEIVE_CHAR:
01BF 3098FD          327                     JNB RI, RECEIVE_CHAR   ; Wait until a character is received
01C2 E599            328                     MOV A, SBUF            ; Move received byte to Accumulator
01C4 C298            329                     CLR RI                 ; Clear RI for next reception
01C6 22              330                     RET
                     331             
01C7                 332             SEND_RESPONSE:
01C7 744E            333                     MOV A, #'N'                 ; Load ASCII of 'N' into A
01C9 5120            334                     ACALL SEND_CHAR             ; Send character via UART
01CB 7445            335                     MOV A, #'E'                 ; Load ASCII of 'E' into A
01CD 5120            336                     ACALL SEND_CHAR             ; Send character via UART
01CF 7457            337                     MOV A, #'W'                 ; Load ASCII of 'W' into A
01D1 5120            338                     ACALL SEND_CHAR             ; Send character via UART
01D3 7420            339                     MOV A, #' '                 ; Load ASCII of space into A
01D5 5120            340                     ACALL SEND_CHAR             ; Send character via UART
01D7 7450            341                     MOV A, #'P'                 ; Load ASCII of 'P' into A
01D9 5120            342                     ACALL SEND_CHAR             ; Send character via UART
01DB 7441            343                     MOV A, #'A'                 ; Load ASCII of 'A' into A
01DD 5120            344                     ACALL SEND_CHAR             ; Send character via UART
01DF 7453            345                     MOV A, #'S'                 ; Load ASCII of 'S' into A
01E1 5120            346                     ACALL SEND_CHAR             ; Send character via UART
01E3 7453            347                     MOV A, #'S'                 ; Load ASCII of 'S' into A
01E5 5120            348                     ACALL SEND_CHAR             ; Send character via UART
01E7 7457            349                     MOV A, #'W'                 ; Load ASCII of 'W' into A
01E9 5120            350                     ACALL SEND_CHAR             ; Send character via UART
01EB 744F            351                     MOV A, #'O'                 ; Load ASCII of 'O' into A
01ED 5120            352                     ACALL SEND_CHAR             ; Send character via UART
01EF 7452            353                     MOV A, #'R'                 ; Load ASCII of 'R' into A
01F1 5120            354                     ACALL SEND_CHAR             ; Send character via UART
01F3 7444            355                     MOV A, #'D'                 ; Load ASCII of 'D' into A
01F5 5120            356                     ACALL SEND_CHAR             ; Send character via UART
01F7 743A            357                     MOV A, #':'                 ; Load ASCII of ':' into A
01F9 5120            358                     ACALL SEND_CHAR             ; Send character via UART
01FB 7420            359                     MOV A, #' '                 ; Load ASCII of space into A
01FD 5120            360                     ACALL SEND_CHAR             ; Send character via UART
01FF E531            361                     MOV A, 0x31              ; Load first digit
0201 5120            362                     ACALL SEND_CHAR        ; Send character
0203 E532            363                     MOV A, 0x32              ; Load second digit
0205 5120            364                     ACALL SEND_CHAR        ; Send character
0207 E533            365                     MOV A, 0x33            ; Load third digit
0209 5120            366                     ACALL SEND_CHAR        ; Send character
020B E534            367                     MOV A, 0x34              ; Load fourth digit
020D 5120            368                     ACALL SEND_CHAR        ; Send character 
020F E535            369                     MOV A, 0x35              ; Load fourth digit
0211 5120            370                     ACALL SEND_CHAR        ; Send character
0213 E536            371                     MOV A, 0x36              ; Load fourth digit
0215 5120            372                     ACALL SEND_CHAR        ; Send character
0217 740D            373                     MOV A, #0x0D                ; Load ASCII for Carriage Return (CR)          
                                  
0219 5120            374                     ACALL SEND_CHAR             ; Send CR via UART
021B 740A            375                     MOV A, #0x0A                ; Load ASCII for Line Feed (LF)
021D 5120            376                     ACALL SEND_CHAR             ; Send LF via UART
021F 22              377                     RET
                     378             
0220                 379             SEND_CHAR:
0220 F599            380                     MOV SBUF, A            ; Load A into SBUF to transmit
0222 3099FD          381                     JNB TI, $              ; Wait for transmission to complete
0225 C299            382                     CLR TI                 ; Clear transmit interrupt flag
0227 22              383                     RET
                     384             
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/07/2024 14:04:57 PAGE     7

0228                 385             DISPLAY_PASSWORD:
0228 7450            386                     MOV A, #'P'                 ; Load ASCII of 'P' into A
022A 5120            387                     ACALL SEND_CHAR             ; Send character via UART
022C 7441            388                     MOV A, #'A'                 ; Load ASCII of 'A' into A
022E 5120            389                     ACALL SEND_CHAR             ; Send character via UART
0230 7453            390                     MOV A, #'S'                 ; Load ASCII of 'S' into A
0232 5120            391                     ACALL SEND_CHAR             ; Send character via UART
0234 7453            392                     MOV A, #'S'                 ; Load ASCII of 'S' into A
0236 5120            393                     ACALL SEND_CHAR             ; Send character via UART
0238 7457            394                     MOV A, #'W'                 ; Load ASCII of 'W' into A
023A 5120            395                     ACALL SEND_CHAR             ; Send character via UART
023C 744F            396                     MOV A, #'O'                 ; Load ASCII of 'O' into A
023E 5120            397                     ACALL SEND_CHAR             ; Send character via UART
0240 7452            398                     MOV A, #'R'                 ; Load ASCII of 'R' into A
0242 5120            399                     ACALL SEND_CHAR             ; Send character via UART
0244 7444            400                     MOV A, #'D'                 ; Load ASCII of 'D' into A
0246 5120            401                     ACALL SEND_CHAR             ; Send character via UART
0248 7420            402                     MOV A, #' '                 ; Load ASCII of space into A
024A 5120            403                     ACALL SEND_CHAR             ; Send character via UART
024C 7449            404                     MOV A, #'I'                 ; Load ASCII of 'I' into A
024E 5120            405                     ACALL SEND_CHAR             ; Send character via UART
0250 7453            406                     MOV A, #'S'                 ; Load ASCII of 'S' into A
0252 5120            407                     ACALL SEND_CHAR             ; Send character via UART
0254 743A            408                     MOV A, #':'                 ; Load ASCII of ':' into A
0256 5120            409                     ACALL SEND_CHAR             ; Send character via UART
0258 7420            410                     MOV A, #' '                 ; Load ASCII of space into A
025A 5120            411                     ACALL SEND_CHAR             ; Send character via UART
025C E531            412                     MOV A,0x31
025E 5120            413                     ACALL SEND_CHAR
0260 E532            414                     MOV A,0x32
0262 5120            415                     ACALL SEND_CHAR
0264 E533            416                     MOV A,0x33
0266 5120            417                     ACALL SEND_CHAR 
0268 E534            418                     MOV A,0x34
026A 5120            419                     ACALL SEND_CHAR
026C E535            420                     MOV A,0x35              ; Load fourth digit
026E 5120            421                     ACALL SEND_CHAR        ; Send character
0270 E536            422                     MOV A,0x36              ; Load fourth digit
0272 5120            423                     ACALL SEND_CHAR        ; Send character
0274 7420            424                     MOV A, #' '
0276 5120            425                     ACALL SEND_CHAR
0278 740D            426                     MOV A, #0x0D                ; Load ASCII for Carriage Return (CR)          
                                  
027A 5120            427                     ACALL SEND_CHAR             ; Send CR via UART
027C 740A            428                     MOV A, #0x0A                ; Load ASCII for Line Feed (LF)
027E 5120            429                     ACALL SEND_CHAR             ; Send LF via UART
0280 22              430                     RET     
                     431                             
                     432     ;===============================================================
                     433     ; Delay subrotines
                     434     ;===============================================================
0281                 435     BUZZER_ON:
0281 D2B5            436             SETB BUZZER
0283 518A            437             ACALL DELAY_B
0285 C2B5            438             CLR BUZZER
0287 518A            439             ACALL DELAY_B
0289 22              440             RET
028A                 441     DELAY_B:
028A 7F02            442                     MOV R7, #2                      ; (1/20)*1 ms
028C 7EFA            443             DB1:MOV R6, #250
028E 7DFA            444             DB2:MOV R5, #250
0290 DDFE            445             DB3:DJNZ R5, DB3
0292 DEFA            446                     DJNZ R6, DB2
0294 DFF6            447                     DJNZ R7, DB1
0296 22              448                     RET
0297                 449     DELAY:
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/07/2024 14:04:57 PAGE     8

0297 7F04            450                     MOV R7, #4                      ; (4/20)*1 ms
0299 7EFA            451             D1: MOV R6, #250
029B 7DFA            452             D2: MOV R5, #250
029D DDFE            453             D3: DJNZ R5, D3
029F DEFA            454                     DJNZ R6, D2
02A1 DFF6            455                     DJNZ R7, D1
02A3 22              456                     RET
                     457     
02A4                 458     MA7SEG:
02A4 C0F9A4B0        459         DB 0C0H, 0F9H, 0A4H, 0B0H, 099H, 092H, 082H, 0F8H, 080H, 090H
02A8 999282F8                
02AC 8090                    
                     460     END
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/07/2024 14:04:57 PAGE     9

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

B. . . . . . . . .  D ADDR   00F0H   A   
BUTTON1. . . . . .  B ADDR   00B0H.2 A   
BUTTON2. . . . . .  B ADDR   00B0H.3 A   
BUTTON3. . . . . .  B ADDR   00B0H.4 A   
BUTTON3_CHECKED. .  C ADDR   0066H   A   
BUZZER . . . . . .  B ADDR   00B0H.5 A   
BUZZER_ON. . . . .  C ADDR   0281H   A   
CHECK_1. . . . . .  C ADDR   0186H   A   
CHECK_1L . . . . .  C ADDR   00E6H   A   
CHECK_2. . . . . .  C ADDR   018CH   A   
CHECK_2L . . . . .  C ADDR   00ECH   A   
CHECK_3. . . . . .  C ADDR   0192H   A   
CHECK_3L . . . . .  C ADDR   00F2H   A   
CHECK_4. . . . . .  C ADDR   0198H   A   
CHECK_4L . . . . .  C ADDR   00F8H   A   
CHECK_5. . . . . .  C ADDR   019EH   A   
CHECK_5L . . . . .  C ADDR   00FEH   A   
CHECK_6. . . . . .  C ADDR   01A4H   A   
CHECK_7. . . . . .  C ADDR   01AAH   A   
CHECK_8. . . . . .  C ADDR   01B0H   A   
CHECK_9. . . . . .  C ADDR   01B6H   A   
CHECK_INDEX. . . .  C ADDR   00DEH   A   
CHEKC_PASSWORD . .  C ADDR   0104H   A   
CONVERT_DIGIT. . .  C ADDR   0180H   A   
CORRECT. . . . . .  C ADDR   012EH   A   
D1 . . . . . . . .  C ADDR   0299H   A   
D2 . . . . . . . .  C ADDR   029BH   A   
D3 . . . . . . . .  C ADDR   029DH   A   
DATA_7SEG. . . . .  D ADDR   0090H   A   
DB1. . . . . . . .  C ADDR   028CH   A   
DB2. . . . . . . .  C ADDR   028EH   A   
DB3. . . . . . . .  C ADDR   0290H   A   
DELAY. . . . . . .  C ADDR   0297H   A   
DELAY_B. . . . . .  C ADDR   028AH   A   
DISPLAY_PASSWORD .  C ADDR   0228H   A   
D_CLOSE. . . . . .  N NUMB   00C6H   A   
D_OPEN . . . . . .  N NUMB   00C0H   A   
EA . . . . . . . .  B ADDR   00A8H.7 A   
ELOCK. . . . . . .  B ADDR   00A0H.7 A   
END_CHECKL . . . .  C ADDR   0103H   A   
ERROR. . . . . . .  C ADDR   01BCH   A   
ES . . . . . . . .  B ADDR   00A8H.4 A   
EX0. . . . . . . .  B ADDR   00A8H.0 A   
EX1. . . . . . . .  B ADDR   00A8H.2 A   
EXIT_1ISR. . . . .  C ADDR   00BDH   A   
EXIT_ISR . . . . .  C ADDR   00DDH   A   
IDLE_LOOP. . . . .  C ADDR   005FH   A   
INCORRECT. . . . .  C ADDR   014DH   A   
INDEX. . . . . . .  N NUMB   0030H   A   
INT0_ISR . . . . .  C ADDR   0073H   A   
INT1_ISR . . . . .  C ADDR   007FH   A   
IT0. . . . . . . .  B ADDR   0088H.0 A   
IT1. . . . . . . .  B ADDR   0088H.2 A   
LED_GREEN. . . . .  B ADDR   00A0H.6 A   
LEN. . . . . . . .  B ADDR   0090H.7 A   
MA7SEG . . . . . .  C ADDR   02A4H   A   
MAIN . . . . . . .  C ADDR   0025H   A   
P1 . . . . . . . .  D ADDR   0090H   A   
P2 . . . . . . . .  D ADDR   00A0H   A   
P3 . . . . . . . .  D ADDR   00B0H   A   
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/07/2024 14:04:57 PAGE    10

PLED1. . . . . . .  B ADDR   00A0H.0 A   
PLED2. . . . . . .  B ADDR   00A0H.1 A   
PLED3. . . . . . .  B ADDR   00A0H.2 A   
PLED4. . . . . . .  B ADDR   00A0H.3 A   
PLED5. . . . . . .  B ADDR   00A0H.4 A   
PLED6. . . . . . .  B ADDR   00A0H.5 A   
RECEIVE_CHAR . . .  C ADDR   01BFH   A   
RESET. . . . . . .  C ADDR   015AH   A   
RETURN . . . . . .  C ADDR   007EH   A   
RI . . . . . . . .  B ADDR   0098H.0 A   
SBUF . . . . . . .  D ADDR   0099H   A   
SCON . . . . . . .  D ADDR   0098H   A   
SEG_TO_ASCII . . .  C ADDR   0167H   A   
SEND_CHAR. . . . .  C ADDR   0220H   A   
SEND_RESPONSE. . .  C ADDR   01C7H   A   
TH1. . . . . . . .  D ADDR   008DH   A   
TI . . . . . . . .  B ADDR   0098H.1 A   
TMOD . . . . . . .  D ADDR   0089H   A   
TR1. . . . . . . .  B ADDR   0088H.6 A   
UART_ISR . . . . .  C ADDR   00BEH   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
