A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/25/2024 15:06:15 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\D_INTERUPTS.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE D_INTERUPTS.a51 SET(SMALL) DEBUG PRINT(.\Listings\D_INTERUPTS.lst) OBJE
                      CT(.\Objects\D_INTERUPTS.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ;===============================================================
                       2     ; 8051 External Interrupts to Control LED on P2.6
                       3     ;===============================================================
  0090                 4     DATA_7SEG    EQU P1                 ; 7-SEGMENT DISPLAY CONNECTED TO PORT 0
  00C6                 5     D_CLOSE          EQU 0x0C6
  00C0                 6     D_OPEN           EQU 0x0C0
                       7             
  00B2                 8     BUTTON1      BIT P3.2               ; BUTTON 1 INPUT ON PORT 3.2
  00B3                 9     BUTTON2      BIT P3.3               ; BUTTON 2 INPUT ON PORT 3.3
  00B4                10     BUTTON3          BIT P3.4                               ; BUTTON 3 INPUT ON PORT 3.4
  00A7                11     BUZZER       BIT P2.7
  0097                12     LEN          BIT P1.7               ; LED ENABLE CONTROL BIT
                      13             
  00A0                14     PLED1            BIT P2.0
  00A1                15     PLED2            BIT P2.1
  00A2                16     PLED3            BIT P2.2
  00A3                17     PLED4            BIT P2.3
  00A4                18     PLED5            BIT P2.4
  00A5                19     PLED6            BIT P2.5
  00A6                20     LED_GREEN    BIT P2.6               ; GREEN LED BIT
  00A7                21     ELOCK        BIT P2.7               ; RED LED BIT
                      22             
  0030                23     INDEX        EQU 0x30                           ; COUNT FOR NUMBER OF DIGITS ENTERED
                      24             
0000                  25     ORG 0000H           ; Reset vector
0000 8023             26     SJMP MAIN           ; Jump to main program      
0003                  27     ORG 0003H           ; External Interrupt 0 (INT0) vector
0003 8067             28     SJMP INT0_ISR       ; Jump to INT0 interrupt service routine
0013                  29     ORG 0013H           ; External Interrupt 1 (INT1) vector
0013 8065             30     SJMP INT1_ISR       ; Jump to INT1 interrupt service routine
0023                  31     ORG 23H         ; Interrupt vector for serial interrupt
0023 01BB             32     AJMP UART_ISR 
                      33     
                      34     ;===============================================================
                      35     ; Main Program
                      36     ;===============================================================
0025                  37     MAIN:
0025 D297             38         SETB LEN        ; Turn on the led7seg
0027 D2AF             39             SETB EA             ; Enable global interrupts
                      40             
                      41             ; SETUP UART Interrupt
0029 758920           42             MOV TMOD, #20H ; Timer 1 in mode 2 (8-bit auto-reload)
002C 758DFD           43         MOV TH1, #-3   ; Baud rate 9600 for 11.0592 MHz crystal
002F 759850           44         MOV SCON, #50H ; Serial mode 1, 8-bit data, 1 stop bit, REN enabled
0032 D28E             45         SETB TR1       ; Start Timer 1
0034 D2AC             46             SETB ES        ; Enable serial interrupt
                      47             
                      48             ; SETUP external Interrupt
0036 D2A8             49         SETB EX0            ; Enable external interrupt 0 (INT0)
0038 D2AA             50         SETB EX1            ; Enable external interrupt 1 (INT1)
003A C288             51              CLR IT0             ; Configure INT0 as level-triggered (low level)
003C C28A             52         CLR IT1             ; Configure INT1 as level-triggered (low level)
                      53             
                      54             ; Initial default password
003E 753132           55             MOV 0x31, #'2'
0041 753231           56             MOV 0x32, #'1'
0044 753330           57             MOV 0x33, #'0'
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/25/2024 15:06:15 PAGE     2

0047 753430           58             MOV 0x34, #'0'
004A 753530           59             MOV 0x35, #'0'
004D 753630           60             MOV 0x36, #'0'
                      61             ;ACALL DISPLAY_PASSWORD
                      62             ;ACALL DISPLAY_PASSWORD
                      63             ;ACALL DISPLAY_PASSWORD
                      64             
                      65             ; CONFIGURE PINS
0050 C2A7             66         CLR ELOCK
0052 C2A6             67         CLR LED_GREEN                 ; TURN OFF GREEN LED INITIALLY
0054 D2A7             68             SETB BUZZER
                      69     
                      70             ; DISPLAY INITIAL VALUE (8) ON 7-SEGMENT
0056 9002B5           71             MOV DPTR, #MA7SEG-1           ; INITIALIZE DPTR WITH ADDRESS OF MA7SEG -1
                      72         ;MOV DATA_7SEG, #D_CLOSE              ; DISPLAY THE LETTER C
0059 7590C6           73             MOV DATA_7SEG, #D_CLOSE           ; DISPLAY THE LETTER C
005C D297             74             SETB P1.7
005E 753000           75         MOV INDEX, #0
0061                  76     IDLE_LOOP:
0061 B2A6             77             CPL LED_GREEN
0063 51A9             78             ACALL DELAY
                      79             ;JNB BUTTON3, BUTTON3_CHECKED
0065 80FA             80             SJMP IDLE_LOOP
0067                  81             BUTTON3_CHECKED:
0067 3101             82                     ACALL CHEKC_PASSWORD
0069 51A9             83                     ACALL DELAY
006B 22               84             RET
                      85     
                      86     ;===============================================================
                      87     ; Interrupt Service Routines
                      88     ;===============================================================
                      89     
                      90     ; INT0 Interrupt Service Routine (Accumulate the number)
006C                  91     INT0_ISR:
006C 5193             92             ACALL BUZZER_ON
006E E4               93         CLR A                          ; CLEAR ACCUMULATOR
006F A3               94         INC DPTR                       ; INCREMENT DPTR FOR NEXT VALUE
0070 93               95         MOVC A, @A+DPTR                ; LOAD NEXT PATTERN FROM MA7SEG
0071 F590             96         MOV DATA_7SEG, A               ; DISPLAY NUMBER ON 7-SEGMENT
                      97         ; CHECK IF VALUE IS NOT 0x90 (9)
0073 B49003           98         CJNE A, #0x90, RETURN
                      99         ; RESET DPTR TO START OF MA7SEG AFTER REACHING 9
0076 9002B5          100         MOV DPTR, #MA7SEG-1
0079                 101             RETURN:
0079 32              102             RETI                ; Return from interrupt
                     103     
                     104     ; INT1 Interrupt Service Routine (Control the number submitted)
007A                 105     INT1_ISR:
007A 5193            106             ACALL BUZZER_ON
                     107             ; Save DATA_7SEG to the register corresponding to the value of INDEX (0-5)
007C E530            108             MOV A, INDEX        ; Move INDEX to Accumulator for comparison
007E B40004          109             CJNE A, #0, CHECKI1  ; Compare INDEX with 0, jump if not equal
0081 A890            110             MOV R0, DATA_7SEG   ; If INDEX == 0, store DATA_7SEG in R0
0083 8021            111             SJMP END_CHECKI            ; Skip remaining checks
0085                 112             CHECKI1:
0085 B40104          113             CJNE A, #1, CHECKI2  ; Compare INDEX with 1, jump if not equal
0088 A990            114             MOV R1, DATA_7SEG   ; If INDEX == 1, store DATA_7SEG in R1
008A 801A            115             SJMP END_CHECKI            ; Skip remaining checks
008C                 116             CHECKI2:
008C B40204          117             CJNE A, #2, CHECKI3  ; Compare INDEX with 2, jump if not equal
008F AA90            118             MOV R2, DATA_7SEG   ; If INDEX == 2, store DATA_7SEG in R2
0091 8013            119             SJMP END_CHECKI            ; Skip remaining checks
0093                 120             CHECKI3:
0093 B40304          121             CJNE A, #3, CHECKI4  ; Compare INDEX with 3, jump if not equal
0096 AB90            122             MOV R3, DATA_7SEG   ; If INDEX == 3, store DATA_7SEG in R3
0098 800C            123             SJMP END_CHECKI            ; Skip remaining checks
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/25/2024 15:06:15 PAGE     3

009A                 124             CHECKI4:
009A B40404          125             CJNE A, #4, CHECKI5  ; Compare INDEX with 4, jump if not equal
009D AC90            126             MOV R4, DATA_7SEG   ; If INDEX == 4, store DATA_7SEG in R4
009F 8005            127             SJMP END_CHECKI            ; Skip remaining checks
00A1                 128             CHECKI5:
00A1 B40502          129             CJNE A, #5, END_CHECKI     ; Compare INDEX with 5, jump to END if not equal
00A4 AD90            130             MOV R5, DATA_7SEG   ; If INDEX == 5, store DATA_7SEG in R5
00A6                 131             END_CHECKI:
                     132         ; Continue with the rest of the program
                     133             ; DISPLAY NUMBER 0 ON 7-SEGMENT
00A6 E4              134         CLR A
00A7 9002B6          135         MOV DPTR, #MA7SEG             ; RESET DPTR TO START OF MA7SEG
00AA 93              136         MOVC A, @A+DPTR
00AB F590            137         MOV DATA_7SEG, A              ; DISPLAY NEXT VALUE ON 7-SEGMENT
00AD 11DB            138             ACALL CHECK_INDEX                         ; DISPLAY THE LED FOR SUBMITTED VALUE
                     139         ; CHECK IF INDEX IS 6
00AF 0530            140         INC INDEX
00B1 E530            141         MOV A, INDEX
00B3 B40604          142         CJNE A, #6, EXIT_1ISR              ; IF NOT, GO BACK TO LOOP
00B6 317E            143             ACALL SEG_TO_ASCII
                     144             ; Check with out password
00B8 3101            145             ACALL CHEKC_PASSWORD            
00BA                 146             EXIT_1ISR:
00BA 32              147             RETI                ; Return from interrupt
                     148             
00BB                 149     UART_ISR:
00BB 31D6            150             ACALL RECEIVE_CHAR     ; Get character from UART
00BD B4231A          151             CJNE A, #'#', EXIT_ISR ; If not '#', exit
                     152             ;CPL LED_RED                       ; For debug
                     153     
                     154             ; 'P' detected, proceed to receive next 6 characters
00C0 31D6            155             ACALL RECEIVE_CHAR     ; Get first number
00C2 F531            156             MOV 0x31, A              ; Store in R0
00C4 31D6            157             ACALL RECEIVE_CHAR     ; Get second number
00C6 F532            158             MOV 0x32, A              ; Store in R1
00C8 31D6            159             ACALL RECEIVE_CHAR     ; Get third number
00CA F533            160             MOV 0x33, A              ; Store in R2
00CC 31D6            161             ACALL RECEIVE_CHAR     ; Get fourth number
00CE F534            162             MOV     0x34, A              ; Store in R3
00D0 31D6            163             ACALL RECEIVE_CHAR     ; Get third number
00D2 F535            164             MOV 0x35, A              ; Store in R4
00D4 31D6            165             ACALL RECEIVE_CHAR     ; Get fourth number
00D6 F536            166             MOV     0x36, A              ; Store in R5
                     167             ; Send back received numbers over UART
00D8 31DE            168             ACALL SEND_RESPONSE
00DA                 169             EXIT_ISR:
                     170             ;CPL LED_GREEN ; For debug, if not P is inserted
00DA 32              171             RETI        ; Return from interrupt
                     172             
                     173     ;===============================================================
                     174     ; Logical check subrotines
                     175     ;===============================================================
00DB                 176             CHECK_INDEX:    ; Control the indicate led by the index
                     177                     ; Compare index with 0
00DB E530            178                     MOV A, index            ; Load the value of index into the accumulator
00DD B40003          179                     CJNE A, #0, CHECK_1L     ; If index ? 0, jump to CHECK_1
00E0 C2A0            180                     CLR PLED1               ; Set P1.2 if index = 0
00E2 22              181                     RET                     ; Return from subroutine
00E3                 182                     CHECK_1L:
00E3 B40103          183                     CJNE A, #1, CHECK_2L     ; If index ? 1, jump to CHECK_2
00E6 C2A1            184                     CLR PLED2               ; Set P1.3 if index = 1
00E8 22              185                     RET                     ; Return from subroutine
00E9                 186                     CHECK_2L:
00E9 B40203          187                     CJNE A, #2, CHECK_3L     ; If index ? 2, jump to CHECK_3
00EC C2A2            188                     CLR PLED3               ; Set P1.4 if index = 2
00EE 22              189                     RET                     ; Return from subroutine
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/25/2024 15:06:15 PAGE     4

00EF                 190                     CHECK_3L:
00EF B40303          191                     CJNE A, #3, CHECK_4L     ; If index ? 2, jump to CHECK_3
00F2 C2A3            192                     CLR PLED4               ; Set P1.4 if index = 2
00F4 22              193                     RET                     ; Return from subroutine
00F5                 194                     CHECK_4L:
00F5 B40403          195                     CJNE A, #4, CHECK_5L     ; If index ? 2, jump to CHECK_3
00F8 C2A4            196                     CLR PLED5               ; Set P1.4 if index = 2
00FA 22              197                     RET                     ; Return from subroutine
00FB                 198                     CHECK_5L:
00FB B40502          199                     CJNE A, #5, END_CHECKL   ; If index ? 3, jump to END_CHECK
00FE C2A5            200                     CLR PLED6               ; Set P1.5 if index = 3
0100                 201                     END_CHECKL:
0100 22              202                     RET                     ; Return from subroutine
                     203                     
0101                 204             CHEKC_PASSWORD: ; CHECK EACH REGISTER AGAINST PASSWORD 
0101 5174            205                     ACALL SEND_PASSWORD
0103 E8              206                     MOV A, R0
0104 8531F0          207                     MOV B,0x31
0107 B5F04A          208                     CJNE A, B, INCORRECT
010A E9              209                     MOV A, R1
010B 8532F0          210                     MOV B,0x32
010E B5F043          211                     CJNE A, B, INCORRECT
0111 EA              212                     MOV A, R2
0112 8533F0          213                     MOV B,0x33
0115 B5F03C          214                     CJNE A, B, INCORRECT
0118 EB              215                     MOV A, R3
0119 8534F0          216                     MOV B,0x34
011C B5F035          217                     CJNE A, B, INCORRECT
011F EC              218                     MOV A, R4
0120 8535F0          219                     MOV B,0x35
0123 B5F02E          220                     CJNE A, B, INCORRECT
0126 ED              221                     MOV A, R5
0127 8536F0          222                     MOV B,0x36
012A B5F027          223                     CJNE A, B, INCORRECT
012D                 224                             CORRECT:
012D D2A7            225                             SETB ELOCK
012F D2A6            226                             SETB LED_GREEN               ; TURN ON GREEN LED
0131 7590C0          227                             MOV DATA_7SEG, #D_OPEN        ; DISPLAY OPEN
0134 5193            228                             ACALL BUZZER_ON
                     229                             ;ACALL DISPLAY_PASSWORD
0136 7590FF          230                             MOV DATA_7SEG, #0xFF
0139 5193            231                             ACALL BUZZER_ON
013B 7590C0          232                             MOV DATA_7SEG, #D_OPEN        ; DISPLAY OPEN
013E 5193            233                             ACALL BUZZER_ON
0140 7590FF          234                             MOV DATA_7SEG, #0xFF
0143 5193            235                             ACALL BUZZER_ON
0145 7590C0          236                             MOV DATA_7SEG, #D_OPEN        ; DISPLAY OPEN
0148 C2A6            237                             CLR LED_GREEN
014A 51A9            238                             ACALL DELAY
014C 51A9            239                             ACALL DELAY
014E 51A9            240                             ACALL DELAY
0150 C2A7            241                             CLR ELOCK
0152 800F            242                             SJMP RESET
0154                 243                             INCORRECT:
0154 7590C6          244                             MOV DATA_7SEG, #D_CLOSE       ; DISPLAY CLOSE
0157 5193            245                             ACALL BUZZER_ON
0159 7590FF          246                             MOV DATA_7SEG, #0xFF
015C 5193            247                             ACALL BUZZER_ON
015E 7590C6          248                             MOV DATA_7SEG, #D_CLOSE       ; DISPLAY CLOSE
0161 8000            249                             SJMP RESET
0163                 250                             RESET:
0163 7800            251                             MOV R0, #00H  ; Set R0 to 0
0165 7900            252                             MOV R1, #00H  ; Set R1 to 0
0167 7A00            253                             MOV R2, #00H  ; Set R2 to 0
0169 7B00            254                             MOV R3, #00H  ; Set R3 to 0
016B 7C00            255                             MOV R4, #00H  ; Set R4 to 0
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/25/2024 15:06:15 PAGE     5

016D 7D00            256                             MOV R5, #00H  ; Set R5 to 0
016F 753000          257                             MOV INDEX, #0                ; RESET INDEX FOR NEXT ENTRY
0172 75A03F          258                             MOV P2, #0x3F                             ; TURN ON ALL SUBMITTED L
                             ED
0175 7590C6          259                             MOV DATA_7SEG, #D_CLOSE
0178 9002B5          260                             MOV DPTR, #MA7SEG-1           ; INITIALIZE DPTR WITH ADDRESS OF MA7
                             SEG -1
017B D2A7            261                             SETB BUZZER
017D 22              262                     RET
                     263                     
                     264     ;===============================================================
                     265     ; Convert subrotines
                     266     ;===============================================================
017E                 267             SEG_TO_ASCII:   ; Convert 7seg led to ascii
017E E8              268                     MOV A, R0
017F 3197            269                     ACALL CONVERT_DIGIT
0181 F8              270                     MOV R0, A
0182 E9              271                     MOV A, R1
0183 3197            272                     ACALL CONVERT_DIGIT
0185 F9              273                     MOV R1, A
0186 EA              274                     MOV A, R2
0187 3197            275                     ACALL CONVERT_DIGIT
0189 FA              276                     MOV R2, A
018A EB              277                     MOV A, R3
018B 3197            278                     ACALL CONVERT_DIGIT
018D FB              279                     MOV R3, A
018E EC              280                     MOV A, R4
018F 3197            281                     ACALL CONVERT_DIGIT
0191 FC              282                     MOV R4, A
0192 ED              283                     MOV A, R5
0193 3197            284                     ACALL CONVERT_DIGIT
0195 FD              285                     MOV R5, A
0196 22              286                     RET
                     287     
0197                 288             CONVERT_DIGIT:
0197 B4C003          289                     CJNE A, #0C0H, CHECK_1
019A 7430            290                     MOV A, #'0'
019C 22              291                     RET
019D                 292                     CHECK_1:
019D B4F903          293                     CJNE A, #0F9H, CHECK_2
01A0 7431            294                     MOV A, #'1'
01A2 22              295                     RET
01A3                 296                     CHECK_2:
01A3 B4A403          297                     CJNE A, #0A4H, CHECK_3
01A6 7432            298                     MOV A, #'2'
01A8 22              299                     RET
01A9                 300                     CHECK_3:
01A9 B4B003          301                     CJNE A, #0B0H, CHECK_4
01AC 7433            302                     MOV A, #'3'
01AE 22              303                     RET
01AF                 304                     CHECK_4:
01AF B49903          305                     CJNE A, #099H, CHECK_5
01B2 7434            306                     MOV A, #'4'
01B4 22              307                     RET
01B5                 308                     CHECK_5:
01B5 B49203          309                     CJNE A, #092H, CHECK_6
01B8 7435            310                     MOV A, #'5'
01BA 22              311                     RET
01BB                 312                     CHECK_6:
01BB B48203          313                     CJNE A, #082H, CHECK_7
01BE 7436            314                     MOV A, #'6'
01C0 22              315                     RET
01C1                 316                     CHECK_7:
01C1 B4F803          317                     CJNE A, #0F8H, CHECK_8
01C4 7437            318                     MOV A, #'7'
01C6 22              319                     RET
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/25/2024 15:06:15 PAGE     6

01C7                 320                     CHECK_8:
01C7 B48003          321                     CJNE A, #080H, CHECK_9
01CA 7438            322                     MOV A, #'8'
01CC 22              323                     RET
01CD                 324                     CHECK_9:
01CD B49003          325                     CJNE A, #090H, ERROR
01D0 7439            326                     MOV A, #'9'
01D2 22              327                     RET
01D3                 328                     ERROR:
01D3 743F            329                     MOV A, #'?'
01D5 22              330                     RET
                     331                             
                     332     ;===============================================================
                     333     ; Write and display subrotines
                     334     ;===============================================================
01D6                 335             RECEIVE_CHAR:
01D6 3098FD          336                     JNB RI, RECEIVE_CHAR   ; Wait until a character is received
01D9 E599            337                     MOV A, SBUF            ; Move received byte to Accumulator
01DB C298            338                     CLR RI                 ; Clear RI for next reception
01DD 22              339                     RET
                     340             
01DE                 341             SEND_RESPONSE:
01DE 744E            342                     MOV A, #'N'                 ; Load ASCII of 'N' into A
01E0 5113            343                     ACALL SEND_CHAR             ; Send character via UART
01E2 7445            344                     MOV A, #'E'                 ; Load ASCII of 'E' into A
01E4 5113            345                     ACALL SEND_CHAR             ; Send character via UART
01E6 7457            346                     MOV A, #'W'                 ; Load ASCII of 'W' into A
01E8 5113            347                     ACALL SEND_CHAR             ; Send character via UART
01EA 743A            348                     MOV A, #':'                 ; Load ASCII of ':' into A
01EC 5113            349                     ACALL SEND_CHAR             ; Send character via UART
01EE 7420            350                     MOV A, #' '                 ; Load ASCII of space into A
01F0 5113            351                     ACALL SEND_CHAR             ; Send character via UART
01F2 E531            352                     MOV A, 0x31              ; Load first digit
01F4 5113            353                     ACALL SEND_CHAR        ; Send character
01F6 E532            354                     MOV A, 0x32              ; Load second digit
01F8 5113            355                     ACALL SEND_CHAR        ; Send character
01FA E533            356                     MOV A, 0x33            ; Load third digit
01FC 5113            357                     ACALL SEND_CHAR        ; Send character
01FE E534            358                     MOV A, 0x34              ; Load fourth digit
0200 5113            359                     ACALL SEND_CHAR        ; Send character 
0202 E535            360                     MOV A, 0x35              ; Load fourth digit
0204 5113            361                     ACALL SEND_CHAR        ; Send character
0206 E536            362                     MOV A, 0x36              ; Load fourth digit
0208 5113            363                     ACALL SEND_CHAR        ; Send character
020A 740D            364                     MOV A, #0x0D                ; Load ASCII for Carriage Return (CR)          
                                  
020C 5113            365                     ACALL SEND_CHAR             ; Send CR via UART
020E 740A            366                     MOV A, #0x0A                ; Load ASCII for Line Feed (LF)
0210 5113            367                     ACALL SEND_CHAR             ; Send LF via UART
0212 22              368                     RET
                     369             
0213                 370             SEND_CHAR:
0213 F599            371                     MOV SBUF, A            ; Load A into SBUF to transmit
0215 3099FD          372                     JNB TI, $              ; Wait for transmission to complete
0218 C299            373                     CLR TI                 ; Clear transmit interrupt flag
021A 22              374                     RET
                     375             
021B                 376             DISPLAY_PASSWORD:
021B 7450            377                     MOV A, #'P'                 ; Load ASCII of 'P' into A
021D 5113            378                     ACALL SEND_CHAR             ; Send character via UART
021F 7441            379                     MOV A, #'A'                 ; Load ASCII of 'A' into A
0221 5113            380                     ACALL SEND_CHAR             ; Send character via UART
0223 7453            381                     MOV A, #'S'                 ; Load ASCII of 'S' into A
0225 5113            382                     ACALL SEND_CHAR             ; Send character via UART
0227 7453            383                     MOV A, #'S'                 ; Load ASCII of 'S' into A
0229 5113            384                     ACALL SEND_CHAR             ; Send character via UART
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/25/2024 15:06:15 PAGE     7

022B 7457            385                     MOV A, #'W'                 ; Load ASCII of 'W' into A
022D 5113            386                     ACALL SEND_CHAR             ; Send character via UART
022F 744F            387                     MOV A, #'O'                 ; Load ASCII of 'O' into A
0231 5113            388                     ACALL SEND_CHAR             ; Send character via UART
0233 7452            389                     MOV A, #'R'                 ; Load ASCII of 'R' into A
0235 5113            390                     ACALL SEND_CHAR             ; Send character via UART
0237 7444            391                     MOV A, #'D'                 ; Load ASCII of 'D' into A
0239 5113            392                     ACALL SEND_CHAR             ; Send character via UART
023B 7420            393                     MOV A, #' '                 ; Load ASCII of space into A
023D 5113            394                     ACALL SEND_CHAR             ; Send character via UART
023F 7449            395                     MOV A, #'I'                 ; Load ASCII of 'I' into A
0241 5113            396                     ACALL SEND_CHAR             ; Send character via UART
0243 7453            397                     MOV A, #'S'                 ; Load ASCII of 'S' into A
0245 5113            398                     ACALL SEND_CHAR             ; Send character via UART
0247 743A            399                     MOV A, #':'                 ; Load ASCII of ':' into A
0249 5113            400                     ACALL SEND_CHAR             ; Send character via UART
024B 7420            401                     MOV A, #' '                 ; Load ASCII of space into A
024D 5113            402                     ACALL SEND_CHAR             ; Send character via UART
024F E531            403                     MOV A,0x31
0251 5113            404                     ACALL SEND_CHAR
0253 E532            405                     MOV A,0x32
0255 5113            406                     ACALL SEND_CHAR
0257 E533            407                     MOV A,0x33
0259 5113            408                     ACALL SEND_CHAR 
025B E534            409                     MOV A,0x34
025D 5113            410                     ACALL SEND_CHAR
025F E535            411                     MOV A,0x35              ; Load fourth digit
0261 5113            412                     ACALL SEND_CHAR        ; Send character
0263 E536            413                     MOV A,0x36              ; Load fourth digit
0265 5113            414                     ACALL SEND_CHAR        ; Send character
0267 7420            415                     MOV A, #' '
0269 5113            416                     ACALL SEND_CHAR
026B 740D            417                     MOV A, #0x0D                ; Load ASCII for Carriage Return (CR)          
                                  
026D 5113            418                     ACALL SEND_CHAR             ; Send CR via UART
026F 740A            419                     MOV A, #0x0A                ; Load ASCII for Line Feed (LF)
0271 5113            420                     ACALL SEND_CHAR             ; Send LF via UART
0273 22              421                     RET
                     422                     
0274                 423             SEND_PASSWORD:
0274 7453            424                     MOV A, #'S'                    ; SEND S OVER UART
0276 5113            425                     ACALL SEND_CHAR
0278 E8              426                     MOV A, R0                     ; SEND 1 OVER UART
0279 5113            427                     ACALL SEND_CHAR
027B E9              428                     MOV A, R1                     ; SEND 2 OVER UART
027C 5113            429                     ACALL SEND_CHAR
027E EA              430                     MOV A, R2                     ; SEND 3 OVER UART
027F 5113            431                     ACALL SEND_CHAR
0281 EB              432                     MOV A, R3                     ; SEND 4 OVER UART
0282 5113            433                     ACALL SEND_CHAR
0284 EC              434                     MOV A, R4                     ; SEND 5 OVER UART
0285 5113            435                     ACALL SEND_CHAR
0287 ED              436                     MOV A, R5                     ; SEND 6 OVER UART
0288 5113            437                     ACALL SEND_CHAR
028A 740D            438                     MOV A, #0x0D                ; Load ASCII for Carriage Return (CR)          
                                  
028C 5113            439                     ACALL SEND_CHAR             ; Send CR via UART
028E 740A            440                     MOV A, #0x0A                ; Load ASCII for Line Feed (LF)
0290 5113            441                     ACALL SEND_CHAR             ; Send LF via UART  
0292 22              442                     RET
                     443     ;===============================================================
                     444     ; Delay subrotines
                     445     ;===============================================================
0293                 446     BUZZER_ON:
0293 C2A7            447             CLR BUZZER
0295 519C            448             ACALL DELAY_B
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/25/2024 15:06:15 PAGE     8

0297 D2A7            449             SETB BUZZER
0299 519C            450             ACALL DELAY_B
029B 22              451             RET
029C                 452     DELAY_B:
029C 7F02            453                     MOV R7, #2                      ; (1/20)*1 ms
029E 7EFA            454             DB1:MOV R6, #250
02A0 7DFA            455             DB2:MOV R5, #250
02A2 DDFE            456             DB3:DJNZ R5, DB3
02A4 DEFA            457                     DJNZ R6, DB2
02A6 DFF6            458                     DJNZ R7, DB1
02A8 22              459                     RET
02A9                 460     DELAY:
02A9 7F04            461                     MOV R7, #4                      ; (4/20)*1 ms
02AB 7EFA            462             D1: MOV R6, #250
02AD 7DFA            463             D2: MOV R5, #250
02AF DDFE            464             D3: DJNZ R5, D3
02B1 DEFA            465                     DJNZ R6, D2
02B3 DFF6            466                     DJNZ R7, D1
02B5 22              467                     RET
                     468     
02B6                 469     MA7SEG:
02B6 C0F9A4B0        470         DB 0C0H, 0F9H, 0A4H, 0B0H, 099H, 092H, 082H, 0F8H, 080H, 090H
02BA 999282F8                
02BE 8090                    
                     471     END
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/25/2024 15:06:15 PAGE     9

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

B. . . . . . . . .  D ADDR   00F0H   A   
BUTTON1. . . . . .  B ADDR   00B0H.2 A   
BUTTON2. . . . . .  B ADDR   00B0H.3 A   
BUTTON3. . . . . .  B ADDR   00B0H.4 A   
BUTTON3_CHECKED. .  C ADDR   0067H   A   
BUZZER . . . . . .  B ADDR   00A0H.7 A   
BUZZER_ON. . . . .  C ADDR   0293H   A   
CHECKI1. . . . . .  C ADDR   0085H   A   
CHECKI2. . . . . .  C ADDR   008CH   A   
CHECKI3. . . . . .  C ADDR   0093H   A   
CHECKI4. . . . . .  C ADDR   009AH   A   
CHECKI5. . . . . .  C ADDR   00A1H   A   
CHECK_1. . . . . .  C ADDR   019DH   A   
CHECK_1L . . . . .  C ADDR   00E3H   A   
CHECK_2. . . . . .  C ADDR   01A3H   A   
CHECK_2L . . . . .  C ADDR   00E9H   A   
CHECK_3. . . . . .  C ADDR   01A9H   A   
CHECK_3L . . . . .  C ADDR   00EFH   A   
CHECK_4. . . . . .  C ADDR   01AFH   A   
CHECK_4L . . . . .  C ADDR   00F5H   A   
CHECK_5. . . . . .  C ADDR   01B5H   A   
CHECK_5L . . . . .  C ADDR   00FBH   A   
CHECK_6. . . . . .  C ADDR   01BBH   A   
CHECK_7. . . . . .  C ADDR   01C1H   A   
CHECK_8. . . . . .  C ADDR   01C7H   A   
CHECK_9. . . . . .  C ADDR   01CDH   A   
CHECK_INDEX. . . .  C ADDR   00DBH   A   
CHEKC_PASSWORD . .  C ADDR   0101H   A   
CONVERT_DIGIT. . .  C ADDR   0197H   A   
CORRECT. . . . . .  C ADDR   012DH   A   
D1 . . . . . . . .  C ADDR   02ABH   A   
D2 . . . . . . . .  C ADDR   02ADH   A   
D3 . . . . . . . .  C ADDR   02AFH   A   
DATA_7SEG. . . . .  D ADDR   0090H   A   
DB1. . . . . . . .  C ADDR   029EH   A   
DB2. . . . . . . .  C ADDR   02A0H   A   
DB3. . . . . . . .  C ADDR   02A2H   A   
DELAY. . . . . . .  C ADDR   02A9H   A   
DELAY_B. . . . . .  C ADDR   029CH   A   
DISPLAY_PASSWORD .  C ADDR   021BH   A   
D_CLOSE. . . . . .  N NUMB   00C6H   A   
D_OPEN . . . . . .  N NUMB   00C0H   A   
EA . . . . . . . .  B ADDR   00A8H.7 A   
ELOCK. . . . . . .  B ADDR   00A0H.7 A   
END_CHECKI . . . .  C ADDR   00A6H   A   
END_CHECKL . . . .  C ADDR   0100H   A   
ERROR. . . . . . .  C ADDR   01D3H   A   
ES . . . . . . . .  B ADDR   00A8H.4 A   
EX0. . . . . . . .  B ADDR   00A8H.0 A   
EX1. . . . . . . .  B ADDR   00A8H.2 A   
EXIT_1ISR. . . . .  C ADDR   00BAH   A   
EXIT_ISR . . . . .  C ADDR   00DAH   A   
IDLE_LOOP. . . . .  C ADDR   0061H   A   
INCORRECT. . . . .  C ADDR   0154H   A   
INDEX. . . . . . .  N NUMB   0030H   A   
INT0_ISR . . . . .  C ADDR   006CH   A   
INT1_ISR . . . . .  C ADDR   007AH   A   
IT0. . . . . . . .  B ADDR   0088H.0 A   
IT1. . . . . . . .  B ADDR   0088H.2 A   
LED_GREEN. . . . .  B ADDR   00A0H.6 A   
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/25/2024 15:06:15 PAGE    10

LEN. . . . . . . .  B ADDR   0090H.7 A   
MA7SEG . . . . . .  C ADDR   02B6H   A   
MAIN . . . . . . .  C ADDR   0025H   A   
P1 . . . . . . . .  D ADDR   0090H   A   
P2 . . . . . . . .  D ADDR   00A0H   A   
P3 . . . . . . . .  D ADDR   00B0H   A   
PLED1. . . . . . .  B ADDR   00A0H.0 A   
PLED2. . . . . . .  B ADDR   00A0H.1 A   
PLED3. . . . . . .  B ADDR   00A0H.2 A   
PLED4. . . . . . .  B ADDR   00A0H.3 A   
PLED5. . . . . . .  B ADDR   00A0H.4 A   
PLED6. . . . . . .  B ADDR   00A0H.5 A   
RECEIVE_CHAR . . .  C ADDR   01D6H   A   
RESET. . . . . . .  C ADDR   0163H   A   
RETURN . . . . . .  C ADDR   0079H   A   
RI . . . . . . . .  B ADDR   0098H.0 A   
SBUF . . . . . . .  D ADDR   0099H   A   
SCON . . . . . . .  D ADDR   0098H   A   
SEG_TO_ASCII . . .  C ADDR   017EH   A   
SEND_CHAR. . . . .  C ADDR   0213H   A   
SEND_PASSWORD. . .  C ADDR   0274H   A   
SEND_RESPONSE. . .  C ADDR   01DEH   A   
TH1. . . . . . . .  D ADDR   008DH   A   
TI . . . . . . . .  B ADDR   0098H.1 A   
TMOD . . . . . . .  D ADDR   0089H   A   
TR1. . . . . . . .  B ADDR   0088H.6 A   
UART_ISR . . . . .  C ADDR   00BBH   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
