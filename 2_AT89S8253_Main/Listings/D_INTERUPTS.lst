A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/21/2024 12:48:31 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\D_INTERUPTS.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE D_INTERUPTS.a51 SET(SMALL) DEBUG PRINT(.\Listings\D_INTERUPTS.lst) OBJE
                      CT(.\Objects\D_INTERUPTS.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ;===============================================================
                       2     ; 8051 External Interrupts to Control LED on P2.6
                       3     ;===============================================================
  0090                 4     DATA_7SEG    EQU P1                 ; 7-SEGMENT DISPLAY CONNECTED TO PORT 0
  00C6                 5     D_CLOSE          EQU 0x0C6
  00C0                 6     D_OPEN           EQU 0x0C0
                       7             
  00B2                 8     BUTTON1      BIT P3.2               ; BUTTON 1 INPUT ON PORT 3.2
  00B3                 9     BUTTON2      BIT P3.3               ; BUTTON 2 INPUT ON PORT 3.3
  00B4                10     BUTTON3          BIT P3.4                               ; BUTTON 3 INPUT ON PORT 3.4
  00A7                11     BUZZER       BIT P2.7
  0097                12     LEN          BIT P1.7               ; LED ENABLE CONTROL BIT
                      13             
  00A0                14     PLED1            BIT P2.0
  00A1                15     PLED2            BIT P2.1
  00A2                16     PLED3            BIT P2.2
  00A3                17     PLED4            BIT P2.3
  00A4                18     PLED5            BIT P2.4
  00A5                19     PLED6            BIT P2.5
  00A6                20     LED_GREEN    BIT P2.6               ; GREEN LED BIT
  00A7                21     ELOCK        BIT P2.7               ; RED LED BIT
                      22             
  0030                23     INDEX        EQU 0x30                           ; COUNT FOR NUMBER OF DIGITS ENTERED
                      24             
0000                  25     ORG 0000H           ; Reset vector
0000 8023             26     SJMP MAIN           ; Jump to main program      
0003                  27     ORG 0003H           ; External Interrupt 0 (INT0) vector
0003 8067             28     SJMP INT0_ISR       ; Jump to INT0 interrupt service routine
0013                  29     ORG 0013H           ; External Interrupt 1 (INT1) vector
0013 8065             30     SJMP INT1_ISR       ; Jump to INT1 interrupt service routine
0023                  31     ORG 23H         ; Interrupt vector for serial interrupt
0023 01BB             32     AJMP UART_ISR 
                      33     
                      34     ;===============================================================
                      35     ; Main Program
                      36     ;===============================================================
0025                  37     MAIN:
0025 D297             38         SETB LEN        ; Turn on the led7seg
0027 D2AF             39             SETB EA             ; Enable global interrupts
                      40             
                      41             ; SETUP UART Interrupt
0029 758920           42             MOV TMOD, #20H ; Timer 1 in mode 2 (8-bit auto-reload)
002C 758DFD           43         MOV TH1, #-3   ; Baud rate 9600 for 11.0592 MHz crystal
002F 759850           44         MOV SCON, #50H ; Serial mode 1, 8-bit data, 1 stop bit, REN enabled
0032 D28E             45         SETB TR1       ; Start Timer 1
0034 D2AC             46             SETB ES        ; Enable serial interrupt
                      47             
                      48             ; SETUP external Interrupt
0036 D2A8             49         SETB EX0            ; Enable external interrupt 0 (INT0)
0038 D2AA             50         SETB EX1            ; Enable external interrupt 1 (INT1)
003A C288             51              CLR IT0             ; Configure INT0 as level-triggered (low level)
003C C28A             52         CLR IT1             ; Configure INT1 as level-triggered (low level)
                      53             
                      54             ; Initial default password
003E 753132           55             MOV 0x31, #'2'
0041 753231           56             MOV 0x32, #'1'
0044 753330           57             MOV 0x33, #'0'
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/21/2024 12:48:31 PAGE     2

0047 753430           58             MOV 0x34, #'0'
004A 753530           59             MOV 0x35, #'0'
004D 753630           60             MOV 0x36, #'0'
                      61             
                      62             ; CONFIGURE PINS
0050 C2A7             63         CLR BUZZER
0052 C2A7             64         CLR ELOCK
0054 C2A6             65         CLR LED_GREEN                 ; TURN OFF GREEN LED INITIALLY
                      66             
                      67             ; DISPLAY INITIAL VALUE (8) ON 7-SEGMENT
0056 9002CD           68             MOV DPTR, #MA7SEG-1           ; INITIALIZE DPTR WITH ADDRESS OF MA7SEG -1
                      69         ;MOV DATA_7SEG, #D_CLOSE              ; DISPLAY THE LETTER C
0059 7590C6           70             MOV DATA_7SEG, #D_CLOSE           ; DISPLAY THE LETTER C
005C D297             71             SETB P1.7
005E 753000           72         MOV INDEX, #0
0061                  73     IDLE_LOOP:
0061 B2A6             74             CPL LED_GREEN
0063 51C1             75             ACALL DELAY
                      76             ;JNB BUTTON3, BUTTON3_CHECKED
0065 80FA             77             SJMP IDLE_LOOP
0067                  78             BUTTON3_CHECKED:
0067 3101             79                     ACALL CHEKC_PASSWORD
0069 51C1             80                     ACALL DELAY
006B 22               81             RET
                      82     
                      83     ;===============================================================
                      84     ; Interrupt Service Routines
                      85     ;===============================================================
                      86     
                      87     ; INT0 Interrupt Service Routine (Accumulate the number)
006C                  88     INT0_ISR:
006C 51AB             89             ACALL BUZZER_ON
006E E4               90         CLR A                          ; CLEAR ACCUMULATOR
006F A3               91         INC DPTR                       ; INCREMENT DPTR FOR NEXT VALUE
0070 93               92         MOVC A, @A+DPTR                ; LOAD NEXT PATTERN FROM MA7SEG
0071 F590             93         MOV DATA_7SEG, A               ; DISPLAY NUMBER ON 7-SEGMENT
                      94         ; CHECK IF VALUE IS NOT 0x90 (9)
0073 B49003           95         CJNE A, #0x90, RETURN
                      96         ; RESET DPTR TO START OF MA7SEG AFTER REACHING 9
0076 9002CD           97         MOV DPTR, #MA7SEG-1
0079                  98             RETURN:
0079 32               99             RETI                ; Return from interrupt
                     100     
                     101     ; INT1 Interrupt Service Routine (Control the number submitted)
007A                 102     INT1_ISR:
007A 51AB            103             ACALL BUZZER_ON
                     104             ; Save DATA_7SEG to the register corresponding to the value of INDEX (0-5)
007C E530            105             MOV A, INDEX        ; Move INDEX to Accumulator for comparison
007E B40004          106             CJNE A, #0, CHECKI1  ; Compare INDEX with 0, jump if not equal
0081 A890            107             MOV R0, DATA_7SEG   ; If INDEX == 0, store DATA_7SEG in R0
0083 8021            108             SJMP END_CHECKI            ; Skip remaining checks
0085                 109             CHECKI1:
0085 B40104          110             CJNE A, #1, CHECKI2  ; Compare INDEX with 1, jump if not equal
0088 A990            111             MOV R1, DATA_7SEG   ; If INDEX == 1, store DATA_7SEG in R1
008A 801A            112             SJMP END_CHECKI            ; Skip remaining checks
008C                 113             CHECKI2:
008C B40204          114             CJNE A, #2, CHECKI3  ; Compare INDEX with 2, jump if not equal
008F AA90            115             MOV R2, DATA_7SEG   ; If INDEX == 2, store DATA_7SEG in R2
0091 8013            116             SJMP END_CHECKI            ; Skip remaining checks
0093                 117             CHECKI3:
0093 B40304          118             CJNE A, #3, CHECKI4  ; Compare INDEX with 3, jump if not equal
0096 AB90            119             MOV R3, DATA_7SEG   ; If INDEX == 3, store DATA_7SEG in R3
0098 800C            120             SJMP END_CHECKI            ; Skip remaining checks
009A                 121             CHECKI4:
009A B40404          122             CJNE A, #4, CHECKI5  ; Compare INDEX with 4, jump if not equal
009D AC90            123             MOV R4, DATA_7SEG   ; If INDEX == 4, store DATA_7SEG in R4
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/21/2024 12:48:31 PAGE     3

009F 8005            124             SJMP END_CHECKI            ; Skip remaining checks
00A1                 125             CHECKI5:
00A1 B40502          126             CJNE A, #5, END_CHECKI     ; Compare INDEX with 5, jump to END if not equal
00A4 AD90            127             MOV R5, DATA_7SEG   ; If INDEX == 5, store DATA_7SEG in R5
00A6                 128             END_CHECKI:
                     129         ; Continue with the rest of the program
                     130             ; DISPLAY NUMBER 0 ON 7-SEGMENT
00A6 E4              131         CLR A
00A7 9002CE          132         MOV DPTR, #MA7SEG             ; RESET DPTR TO START OF MA7SEG
00AA 93              133         MOVC A, @A+DPTR
00AB F590            134         MOV DATA_7SEG, A              ; DISPLAY NEXT VALUE ON 7-SEGMENT
00AD 11DB            135             ACALL CHECK_INDEX                         ; DISPLAY THE LED FOR SUBMITTED VALUE
                     136         ; CHECK IF INDEX IS 6
00AF 0530            137         INC INDEX
00B1 E530            138         MOV A, INDEX
00B3 B40604          139         CJNE A, #6, EXIT_1ISR              ; IF NOT, GO BACK TO LOOP
00B6 3172            140             ACALL SEG_TO_ASCII
                     141             ; Check with out password
00B8 3101            142             ACALL CHEKC_PASSWORD            
00BA                 143             EXIT_1ISR:
00BA 32              144             RETI                ; Return from interrupt
                     145             
00BB                 146     UART_ISR:
00BB 31CA            147             ACALL RECEIVE_CHAR     ; Get character from UART
00BD B4231A          148             CJNE A, #'#', EXIT_ISR ; If not '#', exit
                     149             ;CPL LED_RED                       ; For debug
                     150     
                     151             ; 'P' detected, proceed to receive next 6 characters
00C0 31CA            152             ACALL RECEIVE_CHAR     ; Get first number
00C2 F531            153             MOV 0x31, A              ; Store in R0
00C4 31CA            154             ACALL RECEIVE_CHAR     ; Get second number
00C6 F532            155             MOV 0x32, A              ; Store in R1
00C8 31CA            156             ACALL RECEIVE_CHAR     ; Get third number
00CA F533            157             MOV 0x33, A              ; Store in R2
00CC 31CA            158             ACALL RECEIVE_CHAR     ; Get fourth number
00CE F534            159             MOV     0x34, A              ; Store in R3
00D0 31CA            160             ACALL RECEIVE_CHAR     ; Get third number
00D2 F535            161             MOV 0x35, A              ; Store in R4
00D4 31CA            162             ACALL RECEIVE_CHAR     ; Get fourth number
00D6 F536            163             MOV     0x36, A              ; Store in R5
                     164             ; Send back received numbers over UART
00D8 31D2            165             ACALL SEND_RESPONSE
00DA                 166             EXIT_ISR:
                     167             ;CPL LED_GREEN ; For debug, if not P is inserted
00DA 32              168             RETI        ; Return from interrupt
                     169             
                     170     ;===============================================================
                     171     ; Logical check subrotines
                     172     ;===============================================================
00DB                 173             CHECK_INDEX:    ; Control the indicate led by the index
                     174                     ; Compare index with 0
00DB E530            175                     MOV A, index            ; Load the value of index into the accumulator
00DD B40003          176                     CJNE A, #0, CHECK_1L     ; If index ? 0, jump to CHECK_1
00E0 C2A0            177                     CLR PLED1               ; Set P1.2 if index = 0
00E2 22              178                     RET                     ; Return from subroutine
00E3                 179                     CHECK_1L:
00E3 B40103          180                     CJNE A, #1, CHECK_2L     ; If index ? 1, jump to CHECK_2
00E6 C2A1            181                     CLR PLED2               ; Set P1.3 if index = 1
00E8 22              182                     RET                     ; Return from subroutine
00E9                 183                     CHECK_2L:
00E9 B40203          184                     CJNE A, #2, CHECK_3L     ; If index ? 2, jump to CHECK_3
00EC C2A2            185                     CLR PLED3               ; Set P1.4 if index = 2
00EE 22              186                     RET                     ; Return from subroutine
00EF                 187                     CHECK_3L:
00EF B40303          188                     CJNE A, #3, CHECK_4L     ; If index ? 2, jump to CHECK_3
00F2 C2A3            189                     CLR PLED4               ; Set P1.4 if index = 2
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/21/2024 12:48:31 PAGE     4

00F4 22              190                     RET                     ; Return from subroutine
00F5                 191                     CHECK_4L:
00F5 B40403          192                     CJNE A, #4, CHECK_5L     ; If index ? 2, jump to CHECK_3
00F8 C2A4            193                     CLR PLED5               ; Set P1.4 if index = 2
00FA 22              194                     RET                     ; Return from subroutine
00FB                 195                     CHECK_5L:
00FB B40502          196                     CJNE A, #5, END_CHECKL   ; If index ? 3, jump to END_CHECK
00FE C2A5            197                     CLR PLED6               ; Set P1.5 if index = 3
0100                 198                     END_CHECKL:
0100 22              199                     RET                     ; Return from subroutine
                     200                     
0101                 201             CHEKC_PASSWORD: ; CHECK EACH REGISTER AGAINST PASSWORD 
0101 518C            202                     ACALL SEND_PASSWORD
0103 E8              203                     MOV A, R0
0104 8531F0          204                     MOV B,0x31
0107 B5F042          205                     CJNE A, B, INCORRECT
010A E9              206                     MOV A, R1
010B 8532F0          207                     MOV B,0x32
010E B5F03B          208                     CJNE A, B, INCORRECT
0111 EA              209                     MOV A, R2
0112 8533F0          210                     MOV B,0x33
0115 B5F034          211                     CJNE A, B, INCORRECT
0118 EB              212                     MOV A, R3
0119 8534F0          213                     MOV B,0x34
011C B5F02D          214                     CJNE A, B, INCORRECT
011F EC              215                     MOV A, R4
0120 8535F0          216                     MOV B,0x35
0123 B5F026          217                     CJNE A, B, INCORRECT
0126 ED              218                     MOV A, R5
0127 8536F0          219                     MOV B,0x36
012A B5F01F          220                     CJNE A, B, INCORRECT
012D                 221                             CORRECT:
012D D2A6            222                             SETB LED_GREEN               ; TURN ON GREEN LED
012F 7590C0          223                             MOV DATA_7SEG, #D_OPEN        ; DISPLAY OPEN
0132 5133            224                             ACALL DISPLAY_PASSWORD
0134 C297            225                             CLR LEN
0136 51AB            226                             ACALL BUZZER_ON
0138 D297            227                             SETB LEN
013A 51AB            228                             ACALL BUZZER_ON
013C C297            229                             CLR LEN
013E 51AB            230                             ACALL BUZZER_ON
0140 D297            231                             SETB LEN
0142 C2A6            232                             CLR LED_GREEN
0144 51C1            233                             ACALL DELAY
0146 51C1            234                             ACALL DELAY
0148 51C1            235                             ACALL DELAY
014A 800D            236                             SJMP RESET
014C                 237                             INCORRECT:
014C 7590C6          238                             MOV DATA_7SEG, #D_CLOSE       ; DISPLAY CLOSE
014F C297            239                             CLR LEN
0151 51AB            240                             ACALL BUZZER_ON
0153 D297            241                             SETB LEN
0155 51AB            242                             ACALL BUZZER_ON
0157 8000            243                             SJMP RESET
0159                 244                             RESET:
0159 7800            245                             MOV R0, #00H  ; Set R0 to 0
015B 7900            246                             MOV R1, #00H  ; Set R1 to 0
015D 7A00            247                             MOV R2, #00H  ; Set R2 to 0
015F 7B00            248                             MOV R3, #00H  ; Set R3 to 0
0161 7C00            249                             MOV R4, #00H  ; Set R4 to 0
0163 7D00            250                             MOV R5, #00H  ; Set R5 to 0
0165 753000          251                             MOV INDEX, #0                ; RESET INDEX FOR NEXT ENTRY
0168 75A03F          252                             MOV P2, #0x3F                             ; TURN ON ALL SUBMITTED L
                             ED
016B 7590C6          253                             MOV DATA_7SEG, #D_CLOSE
016E 9002CD          254                             MOV DPTR, #MA7SEG-1           ; INITIALIZE DPTR WITH ADDRESS OF MA7
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/21/2024 12:48:31 PAGE     5

                             SEG -1
0171 22              255                     RET
                     256                     
                     257     ;===============================================================
                     258     ; Convert subrotines
                     259     ;===============================================================
0172                 260             SEG_TO_ASCII:   ; Convert 7seg led to ascii
0172 E8              261                     MOV A, R0
0173 318B            262                     ACALL CONVERT_DIGIT
0175 F8              263                     MOV R0, A
0176 E9              264                     MOV A, R1
0177 318B            265                     ACALL CONVERT_DIGIT
0179 F9              266                     MOV R1, A
017A EA              267                     MOV A, R2
017B 318B            268                     ACALL CONVERT_DIGIT
017D FA              269                     MOV R2, A
017E EB              270                     MOV A, R3
017F 318B            271                     ACALL CONVERT_DIGIT
0181 FB              272                     MOV R3, A
0182 EC              273                     MOV A, R4
0183 318B            274                     ACALL CONVERT_DIGIT
0185 FC              275                     MOV R4, A
0186 ED              276                     MOV A, R5
0187 318B            277                     ACALL CONVERT_DIGIT
0189 FD              278                     MOV R5, A
018A 22              279                     RET
                     280     
018B                 281             CONVERT_DIGIT:
018B B4C003          282                     CJNE A, #0C0H, CHECK_1
018E 7430            283                     MOV A, #'0'
0190 22              284                     RET
0191                 285                     CHECK_1:
0191 B4F903          286                     CJNE A, #0F9H, CHECK_2
0194 7431            287                     MOV A, #'1'
0196 22              288                     RET
0197                 289                     CHECK_2:
0197 B4A403          290                     CJNE A, #0A4H, CHECK_3
019A 7432            291                     MOV A, #'2'
019C 22              292                     RET
019D                 293                     CHECK_3:
019D B4B003          294                     CJNE A, #0B0H, CHECK_4
01A0 7433            295                     MOV A, #'3'
01A2 22              296                     RET
01A3                 297                     CHECK_4:
01A3 B49903          298                     CJNE A, #099H, CHECK_5
01A6 7434            299                     MOV A, #'4'
01A8 22              300                     RET
01A9                 301                     CHECK_5:
01A9 B49203          302                     CJNE A, #092H, CHECK_6
01AC 7435            303                     MOV A, #'5'
01AE 22              304                     RET
01AF                 305                     CHECK_6:
01AF B48203          306                     CJNE A, #082H, CHECK_7
01B2 7436            307                     MOV A, #'6'
01B4 22              308                     RET
01B5                 309                     CHECK_7:
01B5 B4F803          310                     CJNE A, #0F8H, CHECK_8
01B8 7437            311                     MOV A, #'7'
01BA 22              312                     RET
01BB                 313                     CHECK_8:
01BB B48003          314                     CJNE A, #080H, CHECK_9
01BE 7438            315                     MOV A, #'8'
01C0 22              316                     RET
01C1                 317                     CHECK_9:
01C1 B49003          318                     CJNE A, #090H, ERROR
01C4 7439            319                     MOV A, #'9'
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/21/2024 12:48:31 PAGE     6

01C6 22              320                     RET
01C7                 321                     ERROR:
01C7 743F            322                     MOV A, #'?'
01C9 22              323                     RET
                     324                             
                     325     ;===============================================================
                     326     ; Write and display subrotines
                     327     ;===============================================================
01CA                 328             RECEIVE_CHAR:
01CA 3098FD          329                     JNB RI, RECEIVE_CHAR   ; Wait until a character is received
01CD E599            330                     MOV A, SBUF            ; Move received byte to Accumulator
01CF C298            331                     CLR RI                 ; Clear RI for next reception
01D1 22              332                     RET
                     333             
01D2                 334             SEND_RESPONSE:
01D2 744E            335                     MOV A, #'N'                 ; Load ASCII of 'N' into A
01D4 512B            336                     ACALL SEND_CHAR             ; Send character via UART
01D6 7445            337                     MOV A, #'E'                 ; Load ASCII of 'E' into A
01D8 512B            338                     ACALL SEND_CHAR             ; Send character via UART
01DA 7457            339                     MOV A, #'W'                 ; Load ASCII of 'W' into A
01DC 512B            340                     ACALL SEND_CHAR             ; Send character via UART
01DE 7420            341                     MOV A, #' '                 ; Load ASCII of space into A
01E0 512B            342                     ACALL SEND_CHAR             ; Send character via UART
01E2 7450            343                     MOV A, #'P'                 ; Load ASCII of 'P' into A
01E4 512B            344                     ACALL SEND_CHAR             ; Send character via UART
01E6 7441            345                     MOV A, #'A'                 ; Load ASCII of 'A' into A
01E8 512B            346                     ACALL SEND_CHAR             ; Send character via UART
01EA 7453            347                     MOV A, #'S'                 ; Load ASCII of 'S' into A
01EC 512B            348                     ACALL SEND_CHAR             ; Send character via UART
01EE 7453            349                     MOV A, #'S'                 ; Load ASCII of 'S' into A
01F0 512B            350                     ACALL SEND_CHAR             ; Send character via UART
01F2 7457            351                     MOV A, #'W'                 ; Load ASCII of 'W' into A
01F4 512B            352                     ACALL SEND_CHAR             ; Send character via UART
01F6 744F            353                     MOV A, #'O'                 ; Load ASCII of 'O' into A
01F8 512B            354                     ACALL SEND_CHAR             ; Send character via UART
01FA 7452            355                     MOV A, #'R'                 ; Load ASCII of 'R' into A
01FC 512B            356                     ACALL SEND_CHAR             ; Send character via UART
01FE 7444            357                     MOV A, #'D'                 ; Load ASCII of 'D' into A
0200 512B            358                     ACALL SEND_CHAR             ; Send character via UART
0202 743A            359                     MOV A, #':'                 ; Load ASCII of ':' into A
0204 512B            360                     ACALL SEND_CHAR             ; Send character via UART
0206 7420            361                     MOV A, #' '                 ; Load ASCII of space into A
0208 512B            362                     ACALL SEND_CHAR             ; Send character via UART
020A E531            363                     MOV A, 0x31              ; Load first digit
020C 512B            364                     ACALL SEND_CHAR        ; Send character
020E E532            365                     MOV A, 0x32              ; Load second digit
0210 512B            366                     ACALL SEND_CHAR        ; Send character
0212 E533            367                     MOV A, 0x33            ; Load third digit
0214 512B            368                     ACALL SEND_CHAR        ; Send character
0216 E534            369                     MOV A, 0x34              ; Load fourth digit
0218 512B            370                     ACALL SEND_CHAR        ; Send character 
021A E535            371                     MOV A, 0x35              ; Load fourth digit
021C 512B            372                     ACALL SEND_CHAR        ; Send character
021E E536            373                     MOV A, 0x36              ; Load fourth digit
0220 512B            374                     ACALL SEND_CHAR        ; Send character
0222 740D            375                     MOV A, #0x0D                ; Load ASCII for Carriage Return (CR)          
                                  
0224 512B            376                     ACALL SEND_CHAR             ; Send CR via UART
0226 740A            377                     MOV A, #0x0A                ; Load ASCII for Line Feed (LF)
0228 512B            378                     ACALL SEND_CHAR             ; Send LF via UART
022A 22              379                     RET
                     380             
022B                 381             SEND_CHAR:
022B F599            382                     MOV SBUF, A            ; Load A into SBUF to transmit
022D 3099FD          383                     JNB TI, $              ; Wait for transmission to complete
0230 C299            384                     CLR TI                 ; Clear transmit interrupt flag
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/21/2024 12:48:31 PAGE     7

0232 22              385                     RET
                     386             
0233                 387             DISPLAY_PASSWORD:
0233 7450            388                     MOV A, #'P'                 ; Load ASCII of 'P' into A
0235 512B            389                     ACALL SEND_CHAR             ; Send character via UART
0237 7441            390                     MOV A, #'A'                 ; Load ASCII of 'A' into A
0239 512B            391                     ACALL SEND_CHAR             ; Send character via UART
023B 7453            392                     MOV A, #'S'                 ; Load ASCII of 'S' into A
023D 512B            393                     ACALL SEND_CHAR             ; Send character via UART
023F 7453            394                     MOV A, #'S'                 ; Load ASCII of 'S' into A
0241 512B            395                     ACALL SEND_CHAR             ; Send character via UART
0243 7457            396                     MOV A, #'W'                 ; Load ASCII of 'W' into A
0245 512B            397                     ACALL SEND_CHAR             ; Send character via UART
0247 744F            398                     MOV A, #'O'                 ; Load ASCII of 'O' into A
0249 512B            399                     ACALL SEND_CHAR             ; Send character via UART
024B 7452            400                     MOV A, #'R'                 ; Load ASCII of 'R' into A
024D 512B            401                     ACALL SEND_CHAR             ; Send character via UART
024F 7444            402                     MOV A, #'D'                 ; Load ASCII of 'D' into A
0251 512B            403                     ACALL SEND_CHAR             ; Send character via UART
0253 7420            404                     MOV A, #' '                 ; Load ASCII of space into A
0255 512B            405                     ACALL SEND_CHAR             ; Send character via UART
0257 7449            406                     MOV A, #'I'                 ; Load ASCII of 'I' into A
0259 512B            407                     ACALL SEND_CHAR             ; Send character via UART
025B 7453            408                     MOV A, #'S'                 ; Load ASCII of 'S' into A
025D 512B            409                     ACALL SEND_CHAR             ; Send character via UART
025F 743A            410                     MOV A, #':'                 ; Load ASCII of ':' into A
0261 512B            411                     ACALL SEND_CHAR             ; Send character via UART
0263 7420            412                     MOV A, #' '                 ; Load ASCII of space into A
0265 512B            413                     ACALL SEND_CHAR             ; Send character via UART
0267 E531            414                     MOV A,0x31
0269 512B            415                     ACALL SEND_CHAR
026B E532            416                     MOV A,0x32
026D 512B            417                     ACALL SEND_CHAR
026F E533            418                     MOV A,0x33
0271 512B            419                     ACALL SEND_CHAR 
0273 E534            420                     MOV A,0x34
0275 512B            421                     ACALL SEND_CHAR
0277 E535            422                     MOV A,0x35              ; Load fourth digit
0279 512B            423                     ACALL SEND_CHAR        ; Send character
027B E536            424                     MOV A,0x36              ; Load fourth digit
027D 512B            425                     ACALL SEND_CHAR        ; Send character
027F 7420            426                     MOV A, #' '
0281 512B            427                     ACALL SEND_CHAR
0283 740D            428                     MOV A, #0x0D                ; Load ASCII for Carriage Return (CR)          
                                  
0285 512B            429                     ACALL SEND_CHAR             ; Send CR via UART
0287 740A            430                     MOV A, #0x0A                ; Load ASCII for Line Feed (LF)
0289 512B            431                     ACALL SEND_CHAR             ; Send LF via UART
028B 22              432                     RET
                     433                     
028C                 434             SEND_PASSWORD:
028C 7453            435                     MOV A, #'S'                    ; SEND S OVER UART
028E 512B            436                     ACALL SEND_CHAR
0290 E8              437                     MOV A, R0                     ; SEND 1 OVER UART
0291 512B            438                     ACALL SEND_CHAR
0293 E9              439                     MOV A, R1                     ; SEND 2 OVER UART
0294 512B            440                     ACALL SEND_CHAR
0296 EA              441                     MOV A, R2                     ; SEND 3 OVER UART
0297 512B            442                     ACALL SEND_CHAR
0299 EB              443                     MOV A, R3                     ; SEND 4 OVER UART
029A 512B            444                     ACALL SEND_CHAR
029C EC              445                     MOV A, R4                     ; SEND 5 OVER UART
029D 512B            446                     ACALL SEND_CHAR
029F ED              447                     MOV A, R5                     ; SEND 6 OVER UART
02A0 512B            448                     ACALL SEND_CHAR
02A2 740D            449                     MOV A, #0x0D                ; Load ASCII for Carriage Return (CR)          
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/21/2024 12:48:31 PAGE     8

                                  
02A4 512B            450                     ACALL SEND_CHAR             ; Send CR via UART
02A6 740A            451                     MOV A, #0x0A                ; Load ASCII for Line Feed (LF)
02A8 512B            452                     ACALL SEND_CHAR             ; Send LF via UART  
02AA 22              453                     RET
                     454     ;===============================================================
                     455     ; Delay subrotines
                     456     ;===============================================================
02AB                 457     BUZZER_ON:
02AB C2A7            458             CLR BUZZER
02AD 51B4            459             ACALL DELAY_B
02AF D2A7            460             SETB BUZZER
02B1 51B4            461             ACALL DELAY_B
02B3 22              462             RET
02B4                 463     DELAY_B:
02B4 7F02            464                     MOV R7, #2                      ; (1/20)*1 ms
02B6 7EFA            465             DB1:MOV R6, #250
02B8 7DFA            466             DB2:MOV R5, #250
02BA DDFE            467             DB3:DJNZ R5, DB3
02BC DEFA            468                     DJNZ R6, DB2
02BE DFF6            469                     DJNZ R7, DB1
02C0 22              470                     RET
02C1                 471     DELAY:
02C1 7F04            472                     MOV R7, #4                      ; (4/20)*1 ms
02C3 7EFA            473             D1: MOV R6, #250
02C5 7DFA            474             D2: MOV R5, #250
02C7 DDFE            475             D3: DJNZ R5, D3
02C9 DEFA            476                     DJNZ R6, D2
02CB DFF6            477                     DJNZ R7, D1
02CD 22              478                     RET
                     479     
02CE                 480     MA7SEG:
02CE C0F9A4B0        481         DB 0C0H, 0F9H, 0A4H, 0B0H, 099H, 092H, 082H, 0F8H, 080H, 090H
02D2 999282F8                
02D6 8090                    
                     482     END
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/21/2024 12:48:31 PAGE     9

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

B. . . . . . . . .  D ADDR   00F0H   A   
BUTTON1. . . . . .  B ADDR   00B0H.2 A   
BUTTON2. . . . . .  B ADDR   00B0H.3 A   
BUTTON3. . . . . .  B ADDR   00B0H.4 A   
BUTTON3_CHECKED. .  C ADDR   0067H   A   
BUZZER . . . . . .  B ADDR   00A0H.7 A   
BUZZER_ON. . . . .  C ADDR   02ABH   A   
CHECKI1. . . . . .  C ADDR   0085H   A   
CHECKI2. . . . . .  C ADDR   008CH   A   
CHECKI3. . . . . .  C ADDR   0093H   A   
CHECKI4. . . . . .  C ADDR   009AH   A   
CHECKI5. . . . . .  C ADDR   00A1H   A   
CHECK_1. . . . . .  C ADDR   0191H   A   
CHECK_1L . . . . .  C ADDR   00E3H   A   
CHECK_2. . . . . .  C ADDR   0197H   A   
CHECK_2L . . . . .  C ADDR   00E9H   A   
CHECK_3. . . . . .  C ADDR   019DH   A   
CHECK_3L . . . . .  C ADDR   00EFH   A   
CHECK_4. . . . . .  C ADDR   01A3H   A   
CHECK_4L . . . . .  C ADDR   00F5H   A   
CHECK_5. . . . . .  C ADDR   01A9H   A   
CHECK_5L . . . . .  C ADDR   00FBH   A   
CHECK_6. . . . . .  C ADDR   01AFH   A   
CHECK_7. . . . . .  C ADDR   01B5H   A   
CHECK_8. . . . . .  C ADDR   01BBH   A   
CHECK_9. . . . . .  C ADDR   01C1H   A   
CHECK_INDEX. . . .  C ADDR   00DBH   A   
CHEKC_PASSWORD . .  C ADDR   0101H   A   
CONVERT_DIGIT. . .  C ADDR   018BH   A   
CORRECT. . . . . .  C ADDR   012DH   A   
D1 . . . . . . . .  C ADDR   02C3H   A   
D2 . . . . . . . .  C ADDR   02C5H   A   
D3 . . . . . . . .  C ADDR   02C7H   A   
DATA_7SEG. . . . .  D ADDR   0090H   A   
DB1. . . . . . . .  C ADDR   02B6H   A   
DB2. . . . . . . .  C ADDR   02B8H   A   
DB3. . . . . . . .  C ADDR   02BAH   A   
DELAY. . . . . . .  C ADDR   02C1H   A   
DELAY_B. . . . . .  C ADDR   02B4H   A   
DISPLAY_PASSWORD .  C ADDR   0233H   A   
D_CLOSE. . . . . .  N NUMB   00C6H   A   
D_OPEN . . . . . .  N NUMB   00C0H   A   
EA . . . . . . . .  B ADDR   00A8H.7 A   
ELOCK. . . . . . .  B ADDR   00A0H.7 A   
END_CHECKI . . . .  C ADDR   00A6H   A   
END_CHECKL . . . .  C ADDR   0100H   A   
ERROR. . . . . . .  C ADDR   01C7H   A   
ES . . . . . . . .  B ADDR   00A8H.4 A   
EX0. . . . . . . .  B ADDR   00A8H.0 A   
EX1. . . . . . . .  B ADDR   00A8H.2 A   
EXIT_1ISR. . . . .  C ADDR   00BAH   A   
EXIT_ISR . . . . .  C ADDR   00DAH   A   
IDLE_LOOP. . . . .  C ADDR   0061H   A   
INCORRECT. . . . .  C ADDR   014CH   A   
INDEX. . . . . . .  N NUMB   0030H   A   
INT0_ISR . . . . .  C ADDR   006CH   A   
INT1_ISR . . . . .  C ADDR   007AH   A   
IT0. . . . . . . .  B ADDR   0088H.0 A   
IT1. . . . . . . .  B ADDR   0088H.2 A   
LED_GREEN. . . . .  B ADDR   00A0H.6 A   
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/21/2024 12:48:31 PAGE    10

LEN. . . . . . . .  B ADDR   0090H.7 A   
MA7SEG . . . . . .  C ADDR   02CEH   A   
MAIN . . . . . . .  C ADDR   0025H   A   
P1 . . . . . . . .  D ADDR   0090H   A   
P2 . . . . . . . .  D ADDR   00A0H   A   
P3 . . . . . . . .  D ADDR   00B0H   A   
PLED1. . . . . . .  B ADDR   00A0H.0 A   
PLED2. . . . . . .  B ADDR   00A0H.1 A   
PLED3. . . . . . .  B ADDR   00A0H.2 A   
PLED4. . . . . . .  B ADDR   00A0H.3 A   
PLED5. . . . . . .  B ADDR   00A0H.4 A   
PLED6. . . . . . .  B ADDR   00A0H.5 A   
RECEIVE_CHAR . . .  C ADDR   01CAH   A   
RESET. . . . . . .  C ADDR   0159H   A   
RETURN . . . . . .  C ADDR   0079H   A   
RI . . . . . . . .  B ADDR   0098H.0 A   
SBUF . . . . . . .  D ADDR   0099H   A   
SCON . . . . . . .  D ADDR   0098H   A   
SEG_TO_ASCII . . .  C ADDR   0172H   A   
SEND_CHAR. . . . .  C ADDR   022BH   A   
SEND_PASSWORD. . .  C ADDR   028CH   A   
SEND_RESPONSE. . .  C ADDR   01D2H   A   
TH1. . . . . . . .  D ADDR   008DH   A   
TI . . . . . . . .  B ADDR   0098H.1 A   
TMOD . . . . . . .  D ADDR   0089H   A   
TR1. . . . . . . .  B ADDR   0088H.6 A   
UART_ISR . . . . .  C ADDR   00BBH   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
