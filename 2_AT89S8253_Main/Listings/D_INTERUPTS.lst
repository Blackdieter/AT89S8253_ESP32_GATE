A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/25/2024 08:49:35 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\D_INTERUPTS.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE D_INTERUPTS.a51 SET(SMALL) DEBUG PRINT(.\Listings\D_INTERUPTS.lst) OBJE
                      CT(.\Objects\D_INTERUPTS.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ;===============================================================
                       2     ; 8051 External Interrupts to Control LED on P2.6
                       3     ;===============================================================
  0090                 4     DATA_7SEG    EQU P1                 ; 7-SEGMENT DISPLAY CONNECTED TO PORT 0
  00C6                 5     D_CLOSE          EQU 0x0C6
  00C0                 6     D_OPEN           EQU 0x0C0
                       7             
  00B2                 8     BUTTON1      BIT P3.2               ; BUTTON 1 INPUT ON PORT 3.2
  00B3                 9     BUTTON2      BIT P3.3               ; BUTTON 2 INPUT ON PORT 3.3
  00B4                10     BUTTON3          BIT P3.4                               ; BUTTON 3 INPUT ON PORT 3.4
  00A7                11     BUZZER       BIT P2.7
  0097                12     LEN          BIT P1.7               ; LED ENABLE CONTROL BIT
                      13             
  00A0                14     PLED1            BIT P2.0
  00A1                15     PLED2            BIT P2.1
  00A2                16     PLED3            BIT P2.2
  00A3                17     PLED4            BIT P2.3
  00A4                18     PLED5            BIT P2.4
  00A5                19     PLED6            BIT P2.5
  00A6                20     LED_GREEN    BIT P2.6               ; GREEN LED BIT
  00A7                21     ELOCK        BIT P2.7               ; RED LED BIT
                      22             
  0030                23     INDEX        EQU 0x30                           ; COUNT FOR NUMBER OF DIGITS ENTERED
                      24             
0000                  25     ORG 0000H           ; Reset vector
0000 8023             26     SJMP MAIN           ; Jump to main program      
0003                  27     ORG 0003H           ; External Interrupt 0 (INT0) vector
0003 8067             28     SJMP INT0_ISR       ; Jump to INT0 interrupt service routine
0013                  29     ORG 0013H           ; External Interrupt 1 (INT1) vector
0013 8065             30     SJMP INT1_ISR       ; Jump to INT1 interrupt service routine
0023                  31     ORG 23H         ; Interrupt vector for serial interrupt
0023 01BB             32     AJMP UART_ISR 
                      33     
                      34     ;===============================================================
                      35     ; Main Program
                      36     ;===============================================================
0025                  37     MAIN:
0025 D297             38         SETB LEN        ; Turn on the led7seg
0027 D2AF             39             SETB EA             ; Enable global interrupts
                      40             
                      41             ; SETUP UART Interrupt
0029 758920           42             MOV TMOD, #20H ; Timer 1 in mode 2 (8-bit auto-reload)
002C 758DFD           43         MOV TH1, #-3   ; Baud rate 9600 for 11.0592 MHz crystal
002F 759850           44         MOV SCON, #50H ; Serial mode 1, 8-bit data, 1 stop bit, REN enabled
0032 D28E             45         SETB TR1       ; Start Timer 1
0034 D2AC             46             SETB ES        ; Enable serial interrupt
                      47             
                      48             ; SETUP external Interrupt
0036 D2A8             49         SETB EX0            ; Enable external interrupt 0 (INT0)
0038 D2AA             50         SETB EX1            ; Enable external interrupt 1 (INT1)
003A C288             51              CLR IT0             ; Configure INT0 as level-triggered (low level)
003C C28A             52         CLR IT1             ; Configure INT1 as level-triggered (low level)
                      53             
                      54             ; Initial default password
003E 753132           55             MOV 0x31, #'2'
0041 753231           56             MOV 0x32, #'1'
0044 753330           57             MOV 0x33, #'0'
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/25/2024 08:49:35 PAGE     2

0047 753430           58             MOV 0x34, #'0'
004A 753530           59             MOV 0x35, #'0'
004D 753630           60             MOV 0x36, #'0'
                      61             ;ACALL DISPLAY_PASSWORD
                      62             ;ACALL DISPLAY_PASSWORD
                      63             ;ACALL DISPLAY_PASSWORD
                      64             
                      65             ; CONFIGURE PINS
0050 C2A7             66         CLR ELOCK
0052 C2A6             67         CLR LED_GREEN                 ; TURN OFF GREEN LED INITIALLY
0054 D2A7             68             SETB BUZZER
                      69     
                      70             ; DISPLAY INITIAL VALUE (8) ON 7-SEGMENT
0056 9002AD           71             MOV DPTR, #MA7SEG-1           ; INITIALIZE DPTR WITH ADDRESS OF MA7SEG -1
                      72         ;MOV DATA_7SEG, #D_CLOSE              ; DISPLAY THE LETTER C
0059 7590C6           73             MOV DATA_7SEG, #D_CLOSE           ; DISPLAY THE LETTER C
005C D297             74             SETB P1.7
005E 753000           75         MOV INDEX, #0
0061                  76     IDLE_LOOP:
0061 B2A6             77             CPL LED_GREEN
0063 51A1             78             ACALL DELAY
                      79             ;JNB BUTTON3, BUTTON3_CHECKED
0065 80FA             80             SJMP IDLE_LOOP
0067                  81             BUTTON3_CHECKED:
0067 3101             82                     ACALL CHEKC_PASSWORD
0069 51A1             83                     ACALL DELAY
006B 22               84             RET
                      85     
                      86     ;===============================================================
                      87     ; Interrupt Service Routines
                      88     ;===============================================================
                      89     
                      90     ; INT0 Interrupt Service Routine (Accumulate the number)
006C                  91     INT0_ISR:
006C 518B             92             ACALL BUZZER_ON
006E E4               93         CLR A                          ; CLEAR ACCUMULATOR
006F A3               94         INC DPTR                       ; INCREMENT DPTR FOR NEXT VALUE
0070 93               95         MOVC A, @A+DPTR                ; LOAD NEXT PATTERN FROM MA7SEG
0071 F590             96         MOV DATA_7SEG, A               ; DISPLAY NUMBER ON 7-SEGMENT
                      97         ; CHECK IF VALUE IS NOT 0x90 (9)
0073 B49003           98         CJNE A, #0x90, RETURN
                      99         ; RESET DPTR TO START OF MA7SEG AFTER REACHING 9
0076 9002AD          100         MOV DPTR, #MA7SEG-1
0079                 101             RETURN:
0079 32              102             RETI                ; Return from interrupt
                     103     
                     104     ; INT1 Interrupt Service Routine (Control the number submitted)
007A                 105     INT1_ISR:
007A 518B            106             ACALL BUZZER_ON
                     107             ; Save DATA_7SEG to the register corresponding to the value of INDEX (0-5)
007C E530            108             MOV A, INDEX        ; Move INDEX to Accumulator for comparison
007E B40004          109             CJNE A, #0, CHECKI1  ; Compare INDEX with 0, jump if not equal
0081 A890            110             MOV R0, DATA_7SEG   ; If INDEX == 0, store DATA_7SEG in R0
0083 8021            111             SJMP END_CHECKI            ; Skip remaining checks
0085                 112             CHECKI1:
0085 B40104          113             CJNE A, #1, CHECKI2  ; Compare INDEX with 1, jump if not equal
0088 A990            114             MOV R1, DATA_7SEG   ; If INDEX == 1, store DATA_7SEG in R1
008A 801A            115             SJMP END_CHECKI            ; Skip remaining checks
008C                 116             CHECKI2:
008C B40204          117             CJNE A, #2, CHECKI3  ; Compare INDEX with 2, jump if not equal
008F AA90            118             MOV R2, DATA_7SEG   ; If INDEX == 2, store DATA_7SEG in R2
0091 8013            119             SJMP END_CHECKI            ; Skip remaining checks
0093                 120             CHECKI3:
0093 B40304          121             CJNE A, #3, CHECKI4  ; Compare INDEX with 3, jump if not equal
0096 AB90            122             MOV R3, DATA_7SEG   ; If INDEX == 3, store DATA_7SEG in R3
0098 800C            123             SJMP END_CHECKI            ; Skip remaining checks
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/25/2024 08:49:35 PAGE     3

009A                 124             CHECKI4:
009A B40404          125             CJNE A, #4, CHECKI5  ; Compare INDEX with 4, jump if not equal
009D AC90            126             MOV R4, DATA_7SEG   ; If INDEX == 4, store DATA_7SEG in R4
009F 8005            127             SJMP END_CHECKI            ; Skip remaining checks
00A1                 128             CHECKI5:
00A1 B40502          129             CJNE A, #5, END_CHECKI     ; Compare INDEX with 5, jump to END if not equal
00A4 AD90            130             MOV R5, DATA_7SEG   ; If INDEX == 5, store DATA_7SEG in R5
00A6                 131             END_CHECKI:
                     132         ; Continue with the rest of the program
                     133             ; DISPLAY NUMBER 0 ON 7-SEGMENT
00A6 E4              134         CLR A
00A7 9002AE          135         MOV DPTR, #MA7SEG             ; RESET DPTR TO START OF MA7SEG
00AA 93              136         MOVC A, @A+DPTR
00AB F590            137         MOV DATA_7SEG, A              ; DISPLAY NEXT VALUE ON 7-SEGMENT
00AD 11DB            138             ACALL CHECK_INDEX                         ; DISPLAY THE LED FOR SUBMITTED VALUE
                     139         ; CHECK IF INDEX IS 6
00AF 0530            140         INC INDEX
00B1 E530            141         MOV A, INDEX
00B3 B40604          142         CJNE A, #6, EXIT_1ISR              ; IF NOT, GO BACK TO LOOP
00B6 3176            143             ACALL SEG_TO_ASCII
                     144             ; Check with out password
00B8 3101            145             ACALL CHEKC_PASSWORD            
00BA                 146             EXIT_1ISR:
00BA 32              147             RETI                ; Return from interrupt
                     148             
00BB                 149     UART_ISR:
00BB 31CE            150             ACALL RECEIVE_CHAR     ; Get character from UART
00BD B4231A          151             CJNE A, #'#', EXIT_ISR ; If not '#', exit
                     152             ;CPL LED_RED                       ; For debug
                     153     
                     154             ; 'P' detected, proceed to receive next 6 characters
00C0 31CE            155             ACALL RECEIVE_CHAR     ; Get first number
00C2 F531            156             MOV 0x31, A              ; Store in R0
00C4 31CE            157             ACALL RECEIVE_CHAR     ; Get second number
00C6 F532            158             MOV 0x32, A              ; Store in R1
00C8 31CE            159             ACALL RECEIVE_CHAR     ; Get third number
00CA F533            160             MOV 0x33, A              ; Store in R2
00CC 31CE            161             ACALL RECEIVE_CHAR     ; Get fourth number
00CE F534            162             MOV     0x34, A              ; Store in R3
00D0 31CE            163             ACALL RECEIVE_CHAR     ; Get third number
00D2 F535            164             MOV 0x35, A              ; Store in R4
00D4 31CE            165             ACALL RECEIVE_CHAR     ; Get fourth number
00D6 F536            166             MOV     0x36, A              ; Store in R5
                     167             ; Send back received numbers over UART
00D8 31D6            168             ACALL SEND_RESPONSE
00DA                 169             EXIT_ISR:
                     170             ;CPL LED_GREEN ; For debug, if not P is inserted
00DA 32              171             RETI        ; Return from interrupt
                     172             
                     173     ;===============================================================
                     174     ; Logical check subrotines
                     175     ;===============================================================
00DB                 176             CHECK_INDEX:    ; Control the indicate led by the index
                     177                     ; Compare index with 0
00DB E530            178                     MOV A, index            ; Load the value of index into the accumulator
00DD B40003          179                     CJNE A, #0, CHECK_1L     ; If index ? 0, jump to CHECK_1
00E0 C2A0            180                     CLR PLED1               ; Set P1.2 if index = 0
00E2 22              181                     RET                     ; Return from subroutine
00E3                 182                     CHECK_1L:
00E3 B40103          183                     CJNE A, #1, CHECK_2L     ; If index ? 1, jump to CHECK_2
00E6 C2A1            184                     CLR PLED2               ; Set P1.3 if index = 1
00E8 22              185                     RET                     ; Return from subroutine
00E9                 186                     CHECK_2L:
00E9 B40203          187                     CJNE A, #2, CHECK_3L     ; If index ? 2, jump to CHECK_3
00EC C2A2            188                     CLR PLED3               ; Set P1.4 if index = 2
00EE 22              189                     RET                     ; Return from subroutine
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/25/2024 08:49:35 PAGE     4

00EF                 190                     CHECK_3L:
00EF B40303          191                     CJNE A, #3, CHECK_4L     ; If index ? 2, jump to CHECK_3
00F2 C2A3            192                     CLR PLED4               ; Set P1.4 if index = 2
00F4 22              193                     RET                     ; Return from subroutine
00F5                 194                     CHECK_4L:
00F5 B40403          195                     CJNE A, #4, CHECK_5L     ; If index ? 2, jump to CHECK_3
00F8 C2A4            196                     CLR PLED5               ; Set P1.4 if index = 2
00FA 22              197                     RET                     ; Return from subroutine
00FB                 198                     CHECK_5L:
00FB B40502          199                     CJNE A, #5, END_CHECKL   ; If index ? 3, jump to END_CHECK
00FE C2A5            200                     CLR PLED6               ; Set P1.5 if index = 3
0100                 201                     END_CHECKL:
0100 22              202                     RET                     ; Return from subroutine
                     203                     
0101                 204             CHEKC_PASSWORD: ; CHECK EACH REGISTER AGAINST PASSWORD 
0101 516C            205                     ACALL SEND_PASSWORD
0103 E8              206                     MOV A, R0
0104 8531F0          207                     MOV B,0x31
0107 B5F044          208                     CJNE A, B, INCORRECT
010A E9              209                     MOV A, R1
010B 8532F0          210                     MOV B,0x32
010E B5F03D          211                     CJNE A, B, INCORRECT
0111 EA              212                     MOV A, R2
0112 8533F0          213                     MOV B,0x33
0115 B5F036          214                     CJNE A, B, INCORRECT
0118 EB              215                     MOV A, R3
0119 8534F0          216                     MOV B,0x34
011C B5F02F          217                     CJNE A, B, INCORRECT
011F EC              218                     MOV A, R4
0120 8535F0          219                     MOV B,0x35
0123 B5F028          220                     CJNE A, B, INCORRECT
0126 ED              221                     MOV A, R5
0127 8536F0          222                     MOV B,0x36
012A B5F021          223                     CJNE A, B, INCORRECT
012D                 224                             CORRECT:
012D D2A7            225                             SETB ELOCK
012F D2A6            226                             SETB LED_GREEN               ; TURN ON GREEN LED
0131 7590C0          227                             MOV DATA_7SEG, #D_OPEN        ; DISPLAY OPEN
                     228                             ;ACALL DISPLAY_PASSWORD
0134 C297            229                             CLR LEN
0136 518B            230                             ACALL BUZZER_ON
0138 D297            231                             SETB LEN
013A 518B            232                             ACALL BUZZER_ON
013C C297            233                             CLR LEN
013E 518B            234                             ACALL BUZZER_ON
0140 D297            235                             SETB LEN
0142 C2A6            236                             CLR LED_GREEN
0144 51A1            237                             ACALL DELAY
0146 51A1            238                             ACALL DELAY
0148 51A1            239                             ACALL DELAY
014A C2A7            240                             CLR ELOCK
014C 800D            241                             SJMP RESET
014E                 242                             INCORRECT:
014E 7590C6          243                             MOV DATA_7SEG, #D_CLOSE       ; DISPLAY CLOSE
0151 C297            244                             CLR LEN
0153 518B            245                             ACALL BUZZER_ON
0155 D297            246                             SETB LEN
0157 518B            247                             ACALL BUZZER_ON
0159 8000            248                             SJMP RESET
015B                 249                             RESET:
015B 7800            250                             MOV R0, #00H  ; Set R0 to 0
015D 7900            251                             MOV R1, #00H  ; Set R1 to 0
015F 7A00            252                             MOV R2, #00H  ; Set R2 to 0
0161 7B00            253                             MOV R3, #00H  ; Set R3 to 0
0163 7C00            254                             MOV R4, #00H  ; Set R4 to 0
0165 7D00            255                             MOV R5, #00H  ; Set R5 to 0
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/25/2024 08:49:35 PAGE     5

0167 753000          256                             MOV INDEX, #0                ; RESET INDEX FOR NEXT ENTRY
016A 75A03F          257                             MOV P2, #0x3F                             ; TURN ON ALL SUBMITTED L
                             ED
016D 7590C6          258                             MOV DATA_7SEG, #D_CLOSE
0170 9002AD          259                             MOV DPTR, #MA7SEG-1           ; INITIALIZE DPTR WITH ADDRESS OF MA7
                             SEG -1
0173 D2A7            260                             SETB BUZZER
0175 22              261                     RET
                     262                     
                     263     ;===============================================================
                     264     ; Convert subrotines
                     265     ;===============================================================
0176                 266             SEG_TO_ASCII:   ; Convert 7seg led to ascii
0176 E8              267                     MOV A, R0
0177 318F            268                     ACALL CONVERT_DIGIT
0179 F8              269                     MOV R0, A
017A E9              270                     MOV A, R1
017B 318F            271                     ACALL CONVERT_DIGIT
017D F9              272                     MOV R1, A
017E EA              273                     MOV A, R2
017F 318F            274                     ACALL CONVERT_DIGIT
0181 FA              275                     MOV R2, A
0182 EB              276                     MOV A, R3
0183 318F            277                     ACALL CONVERT_DIGIT
0185 FB              278                     MOV R3, A
0186 EC              279                     MOV A, R4
0187 318F            280                     ACALL CONVERT_DIGIT
0189 FC              281                     MOV R4, A
018A ED              282                     MOV A, R5
018B 318F            283                     ACALL CONVERT_DIGIT
018D FD              284                     MOV R5, A
018E 22              285                     RET
                     286     
018F                 287             CONVERT_DIGIT:
018F B4C003          288                     CJNE A, #0C0H, CHECK_1
0192 7430            289                     MOV A, #'0'
0194 22              290                     RET
0195                 291                     CHECK_1:
0195 B4F903          292                     CJNE A, #0F9H, CHECK_2
0198 7431            293                     MOV A, #'1'
019A 22              294                     RET
019B                 295                     CHECK_2:
019B B4A403          296                     CJNE A, #0A4H, CHECK_3
019E 7432            297                     MOV A, #'2'
01A0 22              298                     RET
01A1                 299                     CHECK_3:
01A1 B4B003          300                     CJNE A, #0B0H, CHECK_4
01A4 7433            301                     MOV A, #'3'
01A6 22              302                     RET
01A7                 303                     CHECK_4:
01A7 B49903          304                     CJNE A, #099H, CHECK_5
01AA 7434            305                     MOV A, #'4'
01AC 22              306                     RET
01AD                 307                     CHECK_5:
01AD B49203          308                     CJNE A, #092H, CHECK_6
01B0 7435            309                     MOV A, #'5'
01B2 22              310                     RET
01B3                 311                     CHECK_6:
01B3 B48203          312                     CJNE A, #082H, CHECK_7
01B6 7436            313                     MOV A, #'6'
01B8 22              314                     RET
01B9                 315                     CHECK_7:
01B9 B4F803          316                     CJNE A, #0F8H, CHECK_8
01BC 7437            317                     MOV A, #'7'
01BE 22              318                     RET
01BF                 319                     CHECK_8:
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/25/2024 08:49:35 PAGE     6

01BF B48003          320                     CJNE A, #080H, CHECK_9
01C2 7438            321                     MOV A, #'8'
01C4 22              322                     RET
01C5                 323                     CHECK_9:
01C5 B49003          324                     CJNE A, #090H, ERROR
01C8 7439            325                     MOV A, #'9'
01CA 22              326                     RET
01CB                 327                     ERROR:
01CB 743F            328                     MOV A, #'?'
01CD 22              329                     RET
                     330                             
                     331     ;===============================================================
                     332     ; Write and display subrotines
                     333     ;===============================================================
01CE                 334             RECEIVE_CHAR:
01CE 3098FD          335                     JNB RI, RECEIVE_CHAR   ; Wait until a character is received
01D1 E599            336                     MOV A, SBUF            ; Move received byte to Accumulator
01D3 C298            337                     CLR RI                 ; Clear RI for next reception
01D5 22              338                     RET
                     339             
01D6                 340             SEND_RESPONSE:
01D6 744E            341                     MOV A, #'N'                 ; Load ASCII of 'N' into A
01D8 510B            342                     ACALL SEND_CHAR             ; Send character via UART
01DA 7445            343                     MOV A, #'E'                 ; Load ASCII of 'E' into A
01DC 510B            344                     ACALL SEND_CHAR             ; Send character via UART
01DE 7457            345                     MOV A, #'W'                 ; Load ASCII of 'W' into A
01E0 510B            346                     ACALL SEND_CHAR             ; Send character via UART
01E2 743A            347                     MOV A, #':'                 ; Load ASCII of ':' into A
01E4 510B            348                     ACALL SEND_CHAR             ; Send character via UART
01E6 7420            349                     MOV A, #' '                 ; Load ASCII of space into A
01E8 510B            350                     ACALL SEND_CHAR             ; Send character via UART
01EA E531            351                     MOV A, 0x31              ; Load first digit
01EC 510B            352                     ACALL SEND_CHAR        ; Send character
01EE E532            353                     MOV A, 0x32              ; Load second digit
01F0 510B            354                     ACALL SEND_CHAR        ; Send character
01F2 E533            355                     MOV A, 0x33            ; Load third digit
01F4 510B            356                     ACALL SEND_CHAR        ; Send character
01F6 E534            357                     MOV A, 0x34              ; Load fourth digit
01F8 510B            358                     ACALL SEND_CHAR        ; Send character 
01FA E535            359                     MOV A, 0x35              ; Load fourth digit
01FC 510B            360                     ACALL SEND_CHAR        ; Send character
01FE E536            361                     MOV A, 0x36              ; Load fourth digit
0200 510B            362                     ACALL SEND_CHAR        ; Send character
0202 740D            363                     MOV A, #0x0D                ; Load ASCII for Carriage Return (CR)          
                                  
0204 510B            364                     ACALL SEND_CHAR             ; Send CR via UART
0206 740A            365                     MOV A, #0x0A                ; Load ASCII for Line Feed (LF)
0208 510B            366                     ACALL SEND_CHAR             ; Send LF via UART
020A 22              367                     RET
                     368             
020B                 369             SEND_CHAR:
020B F599            370                     MOV SBUF, A            ; Load A into SBUF to transmit
020D 3099FD          371                     JNB TI, $              ; Wait for transmission to complete
0210 C299            372                     CLR TI                 ; Clear transmit interrupt flag
0212 22              373                     RET
                     374             
0213                 375             DISPLAY_PASSWORD:
0213 7450            376                     MOV A, #'P'                 ; Load ASCII of 'P' into A
0215 510B            377                     ACALL SEND_CHAR             ; Send character via UART
0217 7441            378                     MOV A, #'A'                 ; Load ASCII of 'A' into A
0219 510B            379                     ACALL SEND_CHAR             ; Send character via UART
021B 7453            380                     MOV A, #'S'                 ; Load ASCII of 'S' into A
021D 510B            381                     ACALL SEND_CHAR             ; Send character via UART
021F 7453            382                     MOV A, #'S'                 ; Load ASCII of 'S' into A
0221 510B            383                     ACALL SEND_CHAR             ; Send character via UART
0223 7457            384                     MOV A, #'W'                 ; Load ASCII of 'W' into A
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/25/2024 08:49:35 PAGE     7

0225 510B            385                     ACALL SEND_CHAR             ; Send character via UART
0227 744F            386                     MOV A, #'O'                 ; Load ASCII of 'O' into A
0229 510B            387                     ACALL SEND_CHAR             ; Send character via UART
022B 7452            388                     MOV A, #'R'                 ; Load ASCII of 'R' into A
022D 510B            389                     ACALL SEND_CHAR             ; Send character via UART
022F 7444            390                     MOV A, #'D'                 ; Load ASCII of 'D' into A
0231 510B            391                     ACALL SEND_CHAR             ; Send character via UART
0233 7420            392                     MOV A, #' '                 ; Load ASCII of space into A
0235 510B            393                     ACALL SEND_CHAR             ; Send character via UART
0237 7449            394                     MOV A, #'I'                 ; Load ASCII of 'I' into A
0239 510B            395                     ACALL SEND_CHAR             ; Send character via UART
023B 7453            396                     MOV A, #'S'                 ; Load ASCII of 'S' into A
023D 510B            397                     ACALL SEND_CHAR             ; Send character via UART
023F 743A            398                     MOV A, #':'                 ; Load ASCII of ':' into A
0241 510B            399                     ACALL SEND_CHAR             ; Send character via UART
0243 7420            400                     MOV A, #' '                 ; Load ASCII of space into A
0245 510B            401                     ACALL SEND_CHAR             ; Send character via UART
0247 E531            402                     MOV A,0x31
0249 510B            403                     ACALL SEND_CHAR
024B E532            404                     MOV A,0x32
024D 510B            405                     ACALL SEND_CHAR
024F E533            406                     MOV A,0x33
0251 510B            407                     ACALL SEND_CHAR 
0253 E534            408                     MOV A,0x34
0255 510B            409                     ACALL SEND_CHAR
0257 E535            410                     MOV A,0x35              ; Load fourth digit
0259 510B            411                     ACALL SEND_CHAR        ; Send character
025B E536            412                     MOV A,0x36              ; Load fourth digit
025D 510B            413                     ACALL SEND_CHAR        ; Send character
025F 7420            414                     MOV A, #' '
0261 510B            415                     ACALL SEND_CHAR
0263 740D            416                     MOV A, #0x0D                ; Load ASCII for Carriage Return (CR)          
                                  
0265 510B            417                     ACALL SEND_CHAR             ; Send CR via UART
0267 740A            418                     MOV A, #0x0A                ; Load ASCII for Line Feed (LF)
0269 510B            419                     ACALL SEND_CHAR             ; Send LF via UART
026B 22              420                     RET
                     421                     
026C                 422             SEND_PASSWORD:
026C 7453            423                     MOV A, #'S'                    ; SEND S OVER UART
026E 510B            424                     ACALL SEND_CHAR
0270 E8              425                     MOV A, R0                     ; SEND 1 OVER UART
0271 510B            426                     ACALL SEND_CHAR
0273 E9              427                     MOV A, R1                     ; SEND 2 OVER UART
0274 510B            428                     ACALL SEND_CHAR
0276 EA              429                     MOV A, R2                     ; SEND 3 OVER UART
0277 510B            430                     ACALL SEND_CHAR
0279 EB              431                     MOV A, R3                     ; SEND 4 OVER UART
027A 510B            432                     ACALL SEND_CHAR
027C EC              433                     MOV A, R4                     ; SEND 5 OVER UART
027D 510B            434                     ACALL SEND_CHAR
027F ED              435                     MOV A, R5                     ; SEND 6 OVER UART
0280 510B            436                     ACALL SEND_CHAR
0282 740D            437                     MOV A, #0x0D                ; Load ASCII for Carriage Return (CR)          
                                  
0284 510B            438                     ACALL SEND_CHAR             ; Send CR via UART
0286 740A            439                     MOV A, #0x0A                ; Load ASCII for Line Feed (LF)
0288 510B            440                     ACALL SEND_CHAR             ; Send LF via UART  
028A 22              441                     RET
                     442     ;===============================================================
                     443     ; Delay subrotines
                     444     ;===============================================================
028B                 445     BUZZER_ON:
028B C2A7            446             CLR BUZZER
028D 5194            447             ACALL DELAY_B
028F D2A7            448             SETB BUZZER
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/25/2024 08:49:35 PAGE     8

0291 5194            449             ACALL DELAY_B
0293 22              450             RET
0294                 451     DELAY_B:
0294 7F02            452                     MOV R7, #2                      ; (1/20)*1 ms
0296 7EFA            453             DB1:MOV R6, #250
0298 7DFA            454             DB2:MOV R5, #250
029A DDFE            455             DB3:DJNZ R5, DB3
029C DEFA            456                     DJNZ R6, DB2
029E DFF6            457                     DJNZ R7, DB1
02A0 22              458                     RET
02A1                 459     DELAY:
02A1 7F04            460                     MOV R7, #4                      ; (4/20)*1 ms
02A3 7EFA            461             D1: MOV R6, #250
02A5 7DFA            462             D2: MOV R5, #250
02A7 DDFE            463             D3: DJNZ R5, D3
02A9 DEFA            464                     DJNZ R6, D2
02AB DFF6            465                     DJNZ R7, D1
02AD 22              466                     RET
                     467     
02AE                 468     MA7SEG:
02AE C0F9A4B0        469         DB 0C0H, 0F9H, 0A4H, 0B0H, 099H, 092H, 082H, 0F8H, 080H, 090H
02B2 999282F8                
02B6 8090                    
                     470     END
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/25/2024 08:49:35 PAGE     9

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

B. . . . . . . . .  D ADDR   00F0H   A   
BUTTON1. . . . . .  B ADDR   00B0H.2 A   
BUTTON2. . . . . .  B ADDR   00B0H.3 A   
BUTTON3. . . . . .  B ADDR   00B0H.4 A   
BUTTON3_CHECKED. .  C ADDR   0067H   A   
BUZZER . . . . . .  B ADDR   00A0H.7 A   
BUZZER_ON. . . . .  C ADDR   028BH   A   
CHECKI1. . . . . .  C ADDR   0085H   A   
CHECKI2. . . . . .  C ADDR   008CH   A   
CHECKI3. . . . . .  C ADDR   0093H   A   
CHECKI4. . . . . .  C ADDR   009AH   A   
CHECKI5. . . . . .  C ADDR   00A1H   A   
CHECK_1. . . . . .  C ADDR   0195H   A   
CHECK_1L . . . . .  C ADDR   00E3H   A   
CHECK_2. . . . . .  C ADDR   019BH   A   
CHECK_2L . . . . .  C ADDR   00E9H   A   
CHECK_3. . . . . .  C ADDR   01A1H   A   
CHECK_3L . . . . .  C ADDR   00EFH   A   
CHECK_4. . . . . .  C ADDR   01A7H   A   
CHECK_4L . . . . .  C ADDR   00F5H   A   
CHECK_5. . . . . .  C ADDR   01ADH   A   
CHECK_5L . . . . .  C ADDR   00FBH   A   
CHECK_6. . . . . .  C ADDR   01B3H   A   
CHECK_7. . . . . .  C ADDR   01B9H   A   
CHECK_8. . . . . .  C ADDR   01BFH   A   
CHECK_9. . . . . .  C ADDR   01C5H   A   
CHECK_INDEX. . . .  C ADDR   00DBH   A   
CHEKC_PASSWORD . .  C ADDR   0101H   A   
CONVERT_DIGIT. . .  C ADDR   018FH   A   
CORRECT. . . . . .  C ADDR   012DH   A   
D1 . . . . . . . .  C ADDR   02A3H   A   
D2 . . . . . . . .  C ADDR   02A5H   A   
D3 . . . . . . . .  C ADDR   02A7H   A   
DATA_7SEG. . . . .  D ADDR   0090H   A   
DB1. . . . . . . .  C ADDR   0296H   A   
DB2. . . . . . . .  C ADDR   0298H   A   
DB3. . . . . . . .  C ADDR   029AH   A   
DELAY. . . . . . .  C ADDR   02A1H   A   
DELAY_B. . . . . .  C ADDR   0294H   A   
DISPLAY_PASSWORD .  C ADDR   0213H   A   
D_CLOSE. . . . . .  N NUMB   00C6H   A   
D_OPEN . . . . . .  N NUMB   00C0H   A   
EA . . . . . . . .  B ADDR   00A8H.7 A   
ELOCK. . . . . . .  B ADDR   00A0H.7 A   
END_CHECKI . . . .  C ADDR   00A6H   A   
END_CHECKL . . . .  C ADDR   0100H   A   
ERROR. . . . . . .  C ADDR   01CBH   A   
ES . . . . . . . .  B ADDR   00A8H.4 A   
EX0. . . . . . . .  B ADDR   00A8H.0 A   
EX1. . . . . . . .  B ADDR   00A8H.2 A   
EXIT_1ISR. . . . .  C ADDR   00BAH   A   
EXIT_ISR . . . . .  C ADDR   00DAH   A   
IDLE_LOOP. . . . .  C ADDR   0061H   A   
INCORRECT. . . . .  C ADDR   014EH   A   
INDEX. . . . . . .  N NUMB   0030H   A   
INT0_ISR . . . . .  C ADDR   006CH   A   
INT1_ISR . . . . .  C ADDR   007AH   A   
IT0. . . . . . . .  B ADDR   0088H.0 A   
IT1. . . . . . . .  B ADDR   0088H.2 A   
LED_GREEN. . . . .  B ADDR   00A0H.6 A   
A51 MACRO ASSEMBLER  D_INTERUPTS                                                          12/25/2024 08:49:35 PAGE    10

LEN. . . . . . . .  B ADDR   0090H.7 A   
MA7SEG . . . . . .  C ADDR   02AEH   A   
MAIN . . . . . . .  C ADDR   0025H   A   
P1 . . . . . . . .  D ADDR   0090H   A   
P2 . . . . . . . .  D ADDR   00A0H   A   
P3 . . . . . . . .  D ADDR   00B0H   A   
PLED1. . . . . . .  B ADDR   00A0H.0 A   
PLED2. . . . . . .  B ADDR   00A0H.1 A   
PLED3. . . . . . .  B ADDR   00A0H.2 A   
PLED4. . . . . . .  B ADDR   00A0H.3 A   
PLED5. . . . . . .  B ADDR   00A0H.4 A   
PLED6. . . . . . .  B ADDR   00A0H.5 A   
RECEIVE_CHAR . . .  C ADDR   01CEH   A   
RESET. . . . . . .  C ADDR   015BH   A   
RETURN . . . . . .  C ADDR   0079H   A   
RI . . . . . . . .  B ADDR   0098H.0 A   
SBUF . . . . . . .  D ADDR   0099H   A   
SCON . . . . . . .  D ADDR   0098H   A   
SEG_TO_ASCII . . .  C ADDR   0176H   A   
SEND_CHAR. . . . .  C ADDR   020BH   A   
SEND_PASSWORD. . .  C ADDR   026CH   A   
SEND_RESPONSE. . .  C ADDR   01D6H   A   
TH1. . . . . . . .  D ADDR   008DH   A   
TI . . . . . . . .  B ADDR   0098H.1 A   
TMOD . . . . . . .  D ADDR   0089H   A   
TR1. . . . . . . .  B ADDR   0088H.6 A   
UART_ISR . . . . .  C ADDR   00BBH   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
