A51 MACRO ASSEMBLER  MAIN                                                                 11/09/2024 23:35:23 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\main.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE main.a51 SET(SMALL) DEBUG PRINT(.\Listings\main.lst) OBJECT(.\Objects\m
                      ain.obj) EP

LOC  OBJ            LINE     SOURCE

  0080                 1     DATA_7SEG    EQU P0                 ; 7-SEGMENT DISPLAY CONNECTED TO PORT 0
  00A2                 2     LED1         BIT P2.2               ; LED1 CONTROL BIT
  00A3                 3     LED2         BIT P2.3               ; LED2 CONTROL BIT FOR ENABLING THE 2ND 7-SEGMENT
  00B2                 4     BUTTON1      BIT P3.2               ; BUTTON 1 INPUT ON PORT 3.2
  00B3                 5     BUTTON2      BIT P3.3               ; BUTTON 2 INPUT ON PORT 3.3
  00A6                 6     LED_GREEN    BIT P2.6               ; GREEN LED BIT
  00A7                 7     LED_RED      BIT P2.7               ; RED LED BIT
  00A4                 8     BUZZER       BIT P2.4
  0030                 9     INDEX        EQU 0x30                           ; COUNT FOR NUMBER OF DIGITS ENTERED
0000                  10     UART_BUFFER: DS 4                   ; RESERVE 4 BYTES FOR ASCII CHARACTERS
                      11     
0000                  12     ORG 00H
0000                  13     MAIN:
                      14         ; INITIALIZE UART FOR 9600 BAUD RATE
0000 758920           15         MOV TMOD, #20H                ; TIMER 1 IN MODE 2 (8-BIT AUTO-RELOAD)
0003 758DFD           16         MOV TH1, #0FDH                ; SET BAUD RATE TO 9600 (11.0592 MHZ CLOCK)
0006 759850           17         MOV SCON, #50H                ; UART MODE 1, 8-BIT UART, REN ENABLED
0009 D28E             18         SETB TR1                      ; START TIMER 1
                      19     
                      20         ; CONFIGURE PINS
000B C2A4             21         CLR BUZZER
000D C2A7             22         CLR LED_RED
000F C2A6             23         CLR LED_GREEN                 ; TURN OFF GREEN LED INITIALLY
                      24             
0011 753132           25             MOV 0x31, #'2'
0014 753231           26             MOV 0x32, #'1'
0017 753330           27             MOV 0x33, #'0'
001A 753430           28             MOV 0x34, #'0'
                      29     
                      30             
001D                  31             INIT:
001D 7590FF           32             MOV P1, #0xFF                             ; TURN ON ALL SUBMITTED LED
0020 D2A3             33         SETB LED2
0022 D2B2             34         SETB BUTTON1                  ; SET BUTTON1 AS INPUT
0024 D2B3             35         SETB BUTTON2                  ; SET BUTTON2 AS INPUT
                      36             
                      37         ; CONFIGURE PARAMETERS
0026 9001D3           38         MOV DPTR, #MA7SEG-1           ; INITIALIZE DPTR WITH ADDRESS OF MA7SEG -1
0029 E4               39         CLR A                         ; CLEAR ACCUMULATOR
                      40         
                      41         ; DISPLAY INITIAL VALUE (8) ON 7-SEGMENT
002A 758089           42         MOV DATA_7SEG, #0x89
002D 753000           43         MOV INDEX, #0
0030 8000             44         SJMP LOOP                     ; JUMP TO MAIN LOOP
                      45     
0032                  46     LOOP:
                      47     
                      48         ; CHECK BUTTON STATES
0032 30B20A           49         JNB BUTTON1, INCREMENT_DISPLAY  ; IF BUTTON1 PRESSED, GO TO INCREMENT_DISPLAY
0035 30B318           50         JNB BUTTON2, SAVE_NUMBER        ; IF BUTTON2 PRESSED, GO TO SAVE_NUMBER
                      51             ; CHECK IF UART DATA IS RECEIVED
0038 3098F7           52         JNB RI, LOOP            ; IF RI IS NOT SET, NO NEW UART DATA
003B 3121             53         ACALL RECEIVE_DATA              ; IF RI IS SET, CALL RECEIVE_DATA TO PROCESS UART INPUT
003D 80DE             54             SJMP INIT
                      55             
003F                  56     INCREMENT_DISPLAY:
003F C2A3             57         CLR LED2                       ; DISABLE 7-SEGMENT DISPLAY #2
A51 MACRO ASSEMBLER  MAIN                                                                 11/09/2024 23:35:23 PAGE     2

0041 E4               58         CLR A                          ; CLEAR ACCUMULATOR
0042 A3               59         INC DPTR                       ; INCREMENT DPTR FOR NEXT VALUE
0043 93               60         MOVC A, @A+DPTR                ; LOAD NEXT PATTERN FROM MA7SEG
0044 F580             61         MOV DATA_7SEG, A               ; DISPLAY NUMBER ON 7-SEGMENT
0046 31B1             62             ACALL BUZZER_ON                            ; BUZZ AND DELAY
                      63     
                      64         ; CHECK IF VALUE IS NOT 0x90 (9)
0048 B490E7           65         CJNE A, #0x90, LOOP
                      66         ; RESET DPTR TO START OF MA7SEG AFTER REACHING 9
004B 9001D3           67         MOV DPTR, #MA7SEG-1
004E 80CD             68         SJMP INIT
                      69     
0050                  70     SAVE_NUMBER:
                      71             
                      72         ; SHIFT NUMBERS IN REGISTERS TO MAKE ROOM FOR NEW VALUE IN R0
0050 EA               73         MOV A, R2
0051 FB               74         MOV R3, A                     ; MOVE PREVIOUS R2 TO R3
0052 E9               75         MOV A, R1
0053 FA               76         MOV R2, A                     ; MOVE PREVIOUS R1 TO R2
0054 E8               77         MOV A, R0
0055 F9               78         MOV R1, A                     ; MOVE PREVIOUS R0 TO R1
0056 A880             79         MOV R0, DATA_7SEG             ; STORE NEW NUMBER IN R0
                      80     
                      81         ; DISPLAY NUMBER 0 ON 7-SEGMENT
0058 E4               82         CLR A
0059 9001D4           83         MOV DPTR, #MA7SEG             ; RESET DPTR TO START OF MA7SEG
005C 93               84         MOVC A, @A+DPTR
005D F580             85         MOV DATA_7SEG, A              ; DISPLAY NEXT VALUE ON 7-SEGMENT
005F 11B7             86             ACALL CHECK_INDEX                         ; DISPLAY THE LED FOR SUBMITTED VALUE
0061 31B1             87             ACALL BUZZER_ON                           ; BUZZ AND DELAY
                      88     
                      89         ; CHECK IF INDEX IS 4
0063 0530             90         INC INDEX
0065 E530             91         MOV A, INDEX
0067 B404C8           92         CJNE A, #4, LOOP              ; IF NOT, GO BACK TO LOOP
                      93     
                      94         ; COMPARISON OF ENTERED NUMBERS WITH PASSWORD (1, 1, 1, 1)
                      95         ; CONVERT 7-SEGMENT CODES TO ASCII
                      96     
006A 11D1             97         ACALL SEG_TO_ASCII
                      98     
                      99         ; TRANSMIT "****" AS STRING OVER UART
006C EB              100         MOV A, R3                     ; SEND 1 OVER UART
006D 3192            101         ACALL SEND_CHAR
006F EA              102         MOV A, R2                     ; SEND 2 OVER UART
0070 3192            103         ACALL SEND_CHAR
0072 E9              104         MOV A, R1                     ; SEND 3 OVER UART
0073 3192            105         ACALL SEND_CHAR
0075 E8              106         MOV A, R0                     ; SEND 4 OVER UART
0076 3192            107         ACALL SEND_CHAR
                     108             
0078 740D            109             MOV A, #0x0D                ; Load ASCII for Carriage Return (CR)               
007A 3192            110             ACALL SEND_CHAR             ; Send CR via UART
007C 740A            111             MOV A, #0x0A                ; Load ASCII for Line Feed (LF)
007E 3192            112             ACALL SEND_CHAR             ; Send LF via UART
                     113             
                     114         ; CHECK EACH REGISTER AGAINST PASSWORD "1000"
                     115         
                     116             
0080 EB              117             MOV A, R3
0081 8531F0          118             MOV B, 0x31
0084 B5F021          119         CJNE A, B, INCORRECT
                     120             
0087 EA              121         MOV A, R2
0088 8532F0          122             MOV B,0x32
008B B5F01A          123         CJNE A, B, INCORRECT
A51 MACRO ASSEMBLER  MAIN                                                                 11/09/2024 23:35:23 PAGE     3

                     124             
                     125             
008E E9              126         MOV A, R1
008F 8533F0          127             MOV B,0x33
0092 B5F013          128         CJNE A, B, INCORRECT
                     129             
                     130             
0095 E8              131         MOV A, R0
0096 8534F0          132             MOV B,0x34
0099 B5F00C          133         CJNE A, B, INCORRECT
                     134             
009C                 135             CORRECT:
009C C2A7            136                     CLR LED_RED                  ; TURN OFF RED LED
009E D2A6            137                     SETB LED_GREEN               ; TURN ON GREEN LED
00A0 31B1            138                     ACALL BUZZER_ON
00A2 31B1            139                     ACALL BUZZER_ON
00A4 31B1            140                     ACALL BUZZER_ON
00A6 800A            141                     SJMP RESET
00A8                 142             INCORRECT:
00A8 C2A6            143                     CLR LED_GREEN                ; TURN OFF GREEN LED
00AA D2A7            144                     SETB LED_RED                 ; TURN ON RED LED
00AC 31B1            145                     ACALL BUZZER_ON
00AE 31B1            146                     ACALL BUZZER_ON
00B0 8000            147                     SJMP RESET
00B2                 148             RESET:
00B2 753000          149                     MOV INDEX, #0                ; RESET INDEX FOR NEXT ENTRY
00B5 011D            150                     AJMP INIT                    ; RESTART PROGRAM
                     151                     
                     152     ; SUBROUTINE DEFINE HERE
                     153     
00B7                 154     CHECK_INDEX:
                     155         ; Compare index with 0
00B7 E530            156         MOV A, index            ; Load the value of index into the accumulator
00B9 B40003          157         CJNE A, #0, CHECK_1L     ; If index ? 0, jump to CHECK_1
00BC C292            158         CLR P1.2               ; Set P1.2 if index = 0
00BE 22              159         RET                     ; Return from subroutine
00BF                 160             CHECK_1L:
00BF B40103          161                     CJNE A, #1, CHECK_2L     ; If index ? 1, jump to CHECK_2
00C2 C293            162                     CLR P1.3               ; Set P1.3 if index = 1
00C4 22              163                     RET                     ; Return from subroutine
00C5                 164             CHECK_2L:
00C5 B40203          165                     CJNE A, #2, CHECK_3L     ; If index ? 2, jump to CHECK_3
00C8 C294            166                     CLR P1.4               ; Set P1.4 if index = 2
00CA 22              167                     RET                     ; Return from subroutine
00CB                 168             CHECK_3L:
00CB B40302          169                     CJNE A, #3, END_CHECKL   ; If index ? 3, jump to END_CHECK
00CE C295            170                     CLR P1.5               ; Set P1.5 if index = 3
00D0                 171             END_CHECKL:
00D0 22              172                     RET                     ; Return from subroutine
                     173     
00D1                 174     SEG_TO_ASCII:
00D1 E8              175         MOV A, R0
00D2 11E2            176         ACALL CONVERT_DIGIT
00D4 F8              177         MOV R0, A
                     178     
00D5 E9              179         MOV A, R1
00D6 11E2            180         ACALL CONVERT_DIGIT
00D8 F9              181         MOV R1, A
                     182     
00D9 EA              183         MOV A, R2
00DA 11E2            184         ACALL CONVERT_DIGIT
00DC FA              185         MOV R2, A
                     186     
00DD EB              187         MOV A, R3
00DE 11E2            188         ACALL CONVERT_DIGIT
00E0 FB              189         MOV R3, A
A51 MACRO ASSEMBLER  MAIN                                                                 11/09/2024 23:35:23 PAGE     4

00E1 22              190         RET
                     191     
00E2                 192             CONVERT_DIGIT:
00E2 B4C003          193                             CJNE A, #0C0H, CHECK_1
00E5 7430            194                             MOV A, #'0'
00E7 22              195                             RET
00E8                 196                     CHECK_1:
00E8 B4F903          197                             CJNE A, #0F9H, CHECK_2
00EB 7431            198                             MOV A, #'1'
00ED 22              199                             RET
00EE                 200                     CHECK_2:
00EE B4A403          201                             CJNE A, #0A4H, CHECK_3
00F1 7432            202                             MOV A, #'2'
00F3 22              203                             RET
00F4                 204                     CHECK_3:
00F4 B4B003          205                             CJNE A, #0B0H, CHECK_4
00F7 7433            206                             MOV A, #'3'
00F9 22              207                             RET
00FA                 208                     CHECK_4:
00FA B49903          209                             CJNE A, #099H, CHECK_5
00FD 7434            210                             MOV A, #'4'
00FF 22              211                             RET
0100                 212                     CHECK_5:
0100 B49203          213                             CJNE A, #092H, CHECK_6
0103 7435            214                             MOV A, #'5'
0105 22              215                             RET
0106                 216                     CHECK_6:
0106 B48203          217                             CJNE A, #082H, CHECK_7
0109 7436            218                             MOV A, #'6'
010B 22              219                             RET
010C                 220                     CHECK_7:
010C B4F803          221                             CJNE A, #0F8H, CHECK_8
010F 7437            222                             MOV A, #'7'
0111 22              223                             RET
0112                 224                     CHECK_8:
0112 B48003          225                             CJNE A, #080H, CHECK_9
0115 7438            226                             MOV A, #'8'
0117 22              227                             RET
0118                 228                     CHECK_9:
0118 B49003          229                             CJNE A, #090H, ERROR
011B 7439            230                             MOV A, #'9'
011D 22              231                             RET
011E                 232                     ERROR:
011E 743F            233                             MOV A, #'?'
0120 22              234                             RET
                     235                             
                     236     ;===============================================================
                     237     ; Subroutine: RECEIVE_DATA
                     238     ; Purpose: Receives a string, detects "Pxxxx" format, and echoes it
                     239     ;===============================================================
0121                 240     RECEIVE_DATA:
                     241         ; Wait to receive 'P' character
0121 3139            242         ACALL RECEIVE_CHAR     ; Get character from UART
0123 B450FB          243         CJNE A, #'P', RECEIVE_DATA ; If not 'P', keep waiting
                     244         
                     245         ; 'P' detected, proceed to receive next 4 characters
0126 3139            246         ACALL RECEIVE_CHAR     ; Get first number
0128 F531            247         MOV 0x31, A              ; Store in R0
012A 3139            248         ACALL RECEIVE_CHAR     ; Get second number
012C F532            249         MOV 0x32, A              ; Store in R1
012E 3139            250         ACALL RECEIVE_CHAR     ; Get third number
0130 F533            251         MOV 0x33, A              ; Store in R2
0132 3139            252         ACALL RECEIVE_CHAR     ; Get fourth number
0134 F534            253         MOV 0x34, A              ; Store in R3
                     254     
                     255         ; Send back received numbers over UART
A51 MACRO ASSEMBLER  MAIN                                                                 11/09/2024 23:35:23 PAGE     5

0136 3141            256         ACALL SEND_RESPONSE
                     257     
                     258     
0138 22              259         RET                    ; Return to MAIN loop
                     260             ;===============================================================
                     261             ; Subroutine: RECEIVE_CHAR
                     262             ; Purpose: Waits until a character is received in UART and loads it into A
                     263             ;===============================================================
0139                 264             RECEIVE_CHAR:
0139 3098FD          265                     JNB RI, RECEIVE_CHAR   ; Wait until a character is received
013C E599            266                     MOV A, SBUF            ; Move received byte to Accumulator
013E C298            267                     CLR RI                 ; Clear RI for next reception
0140 22              268                     RET
                     269                     
                     270     ;===============================================================
                     271     ; Subroutine: SEND_RESPONSE
                     272     ; Purpose: Sends R0-R3 content back over UART as ASCII characters
                     273     ;===============================================================
0141                 274             SEND_RESPONSE:
0141 744E            275                     MOV A, #'N'                 ; Load ASCII of 'N' into A
0143 3192            276                     ACALL SEND_CHAR             ; Send character via UART
0145 7445            277                     MOV A, #'E'                 ; Load ASCII of 'E' into A
0147 3192            278                     ACALL SEND_CHAR             ; Send character via UART
0149 7457            279                     MOV A, #'W'                 ; Load ASCII of 'W' into A
014B 3192            280                     ACALL SEND_CHAR             ; Send character via UART
014D 7420            281                     MOV A, #' '                 ; Load ASCII of space into A
014F 3192            282                     ACALL SEND_CHAR             ; Send character via UART
0151 7450            283                     MOV A, #'P'                 ; Load ASCII of 'P' into A
0153 3192            284                     ACALL SEND_CHAR             ; Send character via UART
0155 7441            285                     MOV A, #'A'                 ; Load ASCII of 'A' into A
0157 3192            286                     ACALL SEND_CHAR             ; Send character via UART
0159 7453            287                     MOV A, #'S'                 ; Load ASCII of 'S' into A
015B 3192            288                     ACALL SEND_CHAR             ; Send character via UART
015D 7453            289                     MOV A, #'S'                 ; Load ASCII of 'S' into A
015F 3192            290                     ACALL SEND_CHAR             ; Send character via UART
0161 7457            291                     MOV A, #'W'                 ; Load ASCII of 'W' into A
0163 3192            292                     ACALL SEND_CHAR             ; Send character via UART
0165 744F            293                     MOV A, #'O'                 ; Load ASCII of 'O' into A
0167 3192            294                     ACALL SEND_CHAR             ; Send character via UART
0169 7452            295                     MOV A, #'R'                 ; Load ASCII of 'R' into A
016B 3192            296                     ACALL SEND_CHAR             ; Send character via UART
016D 7444            297                     MOV A, #'D'                 ; Load ASCII of 'D' into A
016F 3192            298                     ACALL SEND_CHAR             ; Send character via UART
0171 743A            299                     MOV A, #':'                 ; Load ASCII of ':' into A
0173 3192            300                     ACALL SEND_CHAR             ; Send character via UART
0175 7420            301                     MOV A, #' '                 ; Load ASCII of space into A
0177 3192            302                     ACALL SEND_CHAR             ; Send character via UART
                     303     
0179 E531            304                     MOV A, 0x31              ; Load first digit
017B 3192            305                     ACALL SEND_CHAR        ; Send character
017D E532            306                     MOV A, 0x32              ; Load second digit
017F 3192            307                     ACALL SEND_CHAR        ; Send character
0181 E533            308                     MOV A, 0x33            ; Load third digit
0183 3192            309                     ACALL SEND_CHAR        ; Send character
0185 E534            310                     MOV A, 0x34              ; Load fourth digit
0187 3192            311                     ACALL SEND_CHAR        ; Send character 
                     312                     
0189 740D            313                     MOV A, #0x0D                ; Load ASCII for Carriage Return (CR)          
                                  
018B 3192            314                     ACALL SEND_CHAR             ; Send CR via UART
018D 740A            315                     MOV A, #0x0A                ; Load ASCII for Line Feed (LF)
018F 3192            316                     ACALL SEND_CHAR             ; Send LF via UART
0191 22              317                     RET
                     318             ;===============================================================
                     319             ; Subroutine: SEND_CHAR
                     320             ; Purpose: Sends character in A over UART
A51 MACRO ASSEMBLER  MAIN                                                                 11/09/2024 23:35:23 PAGE     6

                     321             ;===============================================================
0192                 322                     SEND_CHAR:
0192 F599            323                             MOV SBUF, A            ; Load A into SBUF to transmit
0194 3099FD          324                             JNB TI, $              ; Wait for transmission to complete
0197 C299            325                             CLR TI                 ; Clear transmit interrupt flag
0199 22              326                             RET
019A                 327     DISPLAY_PASSWORD:
019A E531            328             MOV A,0x31
019C 3192            329             ACALL SEND_CHAR
019E E532            330             MOV A,0x32
01A0 3192            331             ACALL SEND_CHAR
01A2 E533            332             MOV A,0x33
01A4 3192            333             ACALL SEND_CHAR 
01A6 E534            334             MOV A,0x34
01A8 3192            335             ACALL SEND_CHAR
01AA 7420            336             MOV A, #' '
01AC 3192            337             ACALL SEND_CHAR
01AE 31C7            338             ACALL DELAY             
01B0 22              339             RET
                     340             
01B1                 341     BUZZER_ON:
01B1 D2A4            342             SETB BUZZER
01B3 31BA            343             ACALL DELAY_B
01B5 C2A4            344             CLR BUZZER
01B7 31BA            345             ACALL DELAY_B
01B9 22              346             RET
                     347             
01BA                 348     DELAY_B:
01BA 7F02            349                     MOV R7, #2                      ; (1/20)*1 ms
01BC 7EFA            350             DB1:MOV R6, #250
01BE 7DFA            351             DB2:MOV R5, #250
01C0 DDFE            352             DB3:DJNZ R5, DB3
01C2 DEFA            353                     DJNZ R6, DB2
01C4 DFF6            354                     DJNZ R7, DB1
01C6 22              355                     RET
                     356     
01C7                 357     DELAY:
01C7 7F04            358                     MOV R7, #4                      ; (4/20)*1 ms
01C9 7EFA            359             D1: MOV R6, #250
01CB 7DFA            360             D2: MOV R5, #250
01CD DDFE            361             D3: DJNZ R5, D3
01CF DEFA            362                     DJNZ R6, D2
01D1 DFF6            363                     DJNZ R7, D1
01D3 22              364                     RET
                     365     
                     366     ; 7-SEGMENT DISPLAY DATA FOR DIGITS 0-9
01D4                 367     MA7SEG:
01D4 C0F9A4B0        368         DB 0C0H, 0F9H, 0A4H, 0B0H, 099H, 092H, 082H, 0F8H, 080H, 090H
01D8 999282F8                
01DC 8090                    
                     369     END
A51 MACRO ASSEMBLER  MAIN                                                                 11/09/2024 23:35:23 PAGE     7

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

B. . . . . . . . .  D ADDR   00F0H   A   
BUTTON1. . . . . .  B ADDR   00B0H.2 A   
BUTTON2. . . . . .  B ADDR   00B0H.3 A   
BUZZER . . . . . .  B ADDR   00A0H.4 A   
BUZZER_ON. . . . .  C ADDR   01B1H   A   
CHECK_1. . . . . .  C ADDR   00E8H   A   
CHECK_1L . . . . .  C ADDR   00BFH   A   
CHECK_2. . . . . .  C ADDR   00EEH   A   
CHECK_2L . . . . .  C ADDR   00C5H   A   
CHECK_3. . . . . .  C ADDR   00F4H   A   
CHECK_3L . . . . .  C ADDR   00CBH   A   
CHECK_4. . . . . .  C ADDR   00FAH   A   
CHECK_5. . . . . .  C ADDR   0100H   A   
CHECK_6. . . . . .  C ADDR   0106H   A   
CHECK_7. . . . . .  C ADDR   010CH   A   
CHECK_8. . . . . .  C ADDR   0112H   A   
CHECK_9. . . . . .  C ADDR   0118H   A   
CHECK_INDEX. . . .  C ADDR   00B7H   A   
CONVERT_DIGIT. . .  C ADDR   00E2H   A   
CORRECT. . . . . .  C ADDR   009CH   A   
D1 . . . . . . . .  C ADDR   01C9H   A   
D2 . . . . . . . .  C ADDR   01CBH   A   
D3 . . . . . . . .  C ADDR   01CDH   A   
DATA_7SEG. . . . .  D ADDR   0080H   A   
DB1. . . . . . . .  C ADDR   01BCH   A   
DB2. . . . . . . .  C ADDR   01BEH   A   
DB3. . . . . . . .  C ADDR   01C0H   A   
DELAY. . . . . . .  C ADDR   01C7H   A   
DELAY_B. . . . . .  C ADDR   01BAH   A   
DISPLAY_PASSWORD .  C ADDR   019AH   A   
END_CHECKL . . . .  C ADDR   00D0H   A   
ERROR. . . . . . .  C ADDR   011EH   A   
INCORRECT. . . . .  C ADDR   00A8H   A   
INCREMENT_DISPLAY.  C ADDR   003FH   A   
INDEX. . . . . . .  N NUMB   0030H   A   
INIT . . . . . . .  C ADDR   001DH   A   
LED1 . . . . . . .  B ADDR   00A0H.2 A   
LED2 . . . . . . .  B ADDR   00A0H.3 A   
LED_GREEN. . . . .  B ADDR   00A0H.6 A   
LED_RED. . . . . .  B ADDR   00A0H.7 A   
LOOP . . . . . . .  C ADDR   0032H   A   
MA7SEG . . . . . .  C ADDR   01D4H   A   
MAIN . . . . . . .  C ADDR   0000H   A   
P0 . . . . . . . .  D ADDR   0080H   A   
P1 . . . . . . . .  D ADDR   0090H   A   
P2 . . . . . . . .  D ADDR   00A0H   A   
P3 . . . . . . . .  D ADDR   00B0H   A   
RECEIVE_CHAR . . .  C ADDR   0139H   A   
RECEIVE_DATA . . .  C ADDR   0121H   A   
RESET. . . . . . .  C ADDR   00B2H   A   
RI . . . . . . . .  B ADDR   0098H.0 A   
SAVE_NUMBER. . . .  C ADDR   0050H   A   
SBUF . . . . . . .  D ADDR   0099H   A   
SCON . . . . . . .  D ADDR   0098H   A   
SEG_TO_ASCII . . .  C ADDR   00D1H   A   
SEND_CHAR. . . . .  C ADDR   0192H   A   
SEND_RESPONSE. . .  C ADDR   0141H   A   
TH1. . . . . . . .  D ADDR   008DH   A   
TI . . . . . . . .  B ADDR   0098H.1 A   
TMOD . . . . . . .  D ADDR   0089H   A   
A51 MACRO ASSEMBLER  MAIN                                                                 11/09/2024 23:35:23 PAGE     8

TR1. . . . . . . .  B ADDR   0088H.6 A   
UART_BUFFER. . . .  C ADDR   0000H   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
