A51 MACRO ASSEMBLER  MAIN                                                                 11/09/2024 21:00:00 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\main.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE main.a51 SET(SMALL) DEBUG PRINT(.\Listings\main.lst) OBJECT(.\Objects\m
                      ain.obj) EP

LOC  OBJ            LINE     SOURCE

  0080                 1     DATA_7SEG    EQU P0                 ; 7-SEGMENT DISPLAY CONNECTED TO PORT 0
  00A2                 2     LED1         BIT P2.2               ; LED1 CONTROL BIT
  00A3                 3     LED2         BIT P2.3               ; LED2 CONTROL BIT FOR ENABLING THE 2ND 7-SEGMENT
  00B2                 4     BUTTON1      BIT P3.2               ; BUTTON 1 INPUT ON PORT 3.2
  00B3                 5     BUTTON2      BIT P3.3               ; BUTTON 2 INPUT ON PORT 3.3
  00A6                 6     LED_GREEN    BIT P2.6               ; GREEN LED BIT
  00A7                 7     LED_RED      BIT P2.7               ; RED LED BIT
  00A4                 8     BUZZER       BIT P2.4
  0030                 9     INDEX        EQU 0x30                           ; COUNT FOR NUMBER OF DIGITS ENTERED
                      10     
0000                  11     UART_BUFFER: DS 4                   ; RESERVE 4 BYTES FOR ASCII CHARACTERS
                      12     
0000                  13     ORG 00H
0000                  14     MAIN:
                      15         ; INITIALIZE UART FOR 9600 BAUD RATE
0000 758920           16         MOV TMOD, #20H                ; TIMER 1 IN MODE 2 (8-BIT AUTO-RELOAD)
0003 758DFD           17         MOV TH1, #0FDH                ; SET BAUD RATE TO 9600 (11.0592 MHZ CLOCK)
0006 759850           18         MOV SCON, #50H                ; UART MODE 1, 8-BIT UART, REN ENABLED
0009 D28E             19         SETB TR1                      ; START TIMER 1
                      20     
                      21         ; CONFIGURE PINS
000B C2A4             22         CLR BUZZER
000D C2A7             23         CLR LED_RED
000F C2A6             24         CLR LED_GREEN                 ; TURN OFF GREEN LED INITIALLY
0011                  25             INIT:
0011 7590FF           26             MOV P1, #0xFF                             ; TURN ON ALL SUBMITTED LED
0014 D2A3             27         SETB LED2
0016 D2B2             28         SETB BUTTON1                  ; SET BUTTON1 AS INPUT
0018 D2B3             29         SETB BUTTON2                  ; SET BUTTON2 AS INPUT
                      30             
                      31         ; CONFIGURE PARAMETERS
001A 900165           32         MOV DPTR, #MA7SEG-1           ; INITIALIZE DPTR WITH ADDRESS OF MA7SEG -1
001D E4               33         CLR A                         ; CLEAR ACCUMULATOR
                      34         
                      35         ; DISPLAY INITIAL VALUE (8) ON 7-SEGMENT
001E 758089           36         MOV DATA_7SEG, #0x89
0021 753000           37         MOV INDEX, #0
0024 8000             38         SJMP LOOP                     ; JUMP TO MAIN LOOP
                      39     
0026                  40     LOOP:
                      41         ; CHECK BUTTON STATES
0026 30B208           42         JNB BUTTON1, INCREMENT_DISPLAY  ; IF BUTTON1 PRESSED, GO TO INCREMENT_DISPLAY
0029 30B316           43         JNB BUTTON2, SAVE_NUMBER        ; IF BUTTON2 PRESSED, GO TO SAVE_NUMBER
                      44             ; CHECK IF UART DATA IS RECEIVED
002C 3098F7           45         JNB RI, LOOP            ; IF RI IS NOT SET, NO NEW UART DATA
002F 310C             46         ACALL RECEIVE_DATA              ; IF RI IS SET, CALL RECEIVE_DATA TO PROCESS UART INPUT
                      47             
0031                  48     INCREMENT_DISPLAY:
0031 C2A3             49         CLR LED2                       ; DISABLE 7-SEGMENT DISPLAY #2
0033 E4               50         CLR A                          ; CLEAR ACCUMULATOR
0034 A3               51         INC DPTR                       ; INCREMENT DPTR FOR NEXT VALUE
0035 93               52         MOVC A, @A+DPTR                ; LOAD NEXT PATTERN FROM MA7SEG
0036 F580             53         MOV DATA_7SEG, A               ; DISPLAY NUMBER ON 7-SEGMENT
0038 3143             54             ACALL BUZZER_ON                            ; BUZZ AND DELAY
                      55     
                      56         ; CHECK IF VALUE IS NOT 0x90 (9)
003A B490E9           57         CJNE A, #0x90, LOOP
A51 MACRO ASSEMBLER  MAIN                                                                 11/09/2024 21:00:00 PAGE     2

                      58         ; RESET DPTR TO START OF MA7SEG AFTER REACHING 9
003D 900165           59         MOV DPTR, #MA7SEG-1
0040 80E4             60         SJMP LOOP
                      61     
0042                  62     SAVE_NUMBER:
                      63         ; SHIFT NUMBERS IN REGISTERS TO MAKE ROOM FOR NEW VALUE IN R0
0042 EA               64         MOV A, R2
0043 FB               65         MOV R3, A                     ; MOVE PREVIOUS R2 TO R3
0044 E9               66         MOV A, R1
0045 FA               67         MOV R2, A                     ; MOVE PREVIOUS R1 TO R2
0046 E8               68         MOV A, R0
0047 F9               69         MOV R1, A                     ; MOVE PREVIOUS R0 TO R1
0048 A880             70         MOV R0, DATA_7SEG             ; STORE NEW NUMBER IN R0
                      71     
                      72         ; DISPLAY NUMBER 0 ON 7-SEGMENT
004A E4               73         CLR A
004B 900166           74         MOV DPTR, #MA7SEG             ; RESET DPTR TO START OF MA7SEG
004E 93               75         MOVC A, @A+DPTR
004F F580             76         MOV DATA_7SEG, A              ; DISPLAY NEXT VALUE ON 7-SEGMENT
0051 11A2             77             ACALL CHECK_INDEX                         ; DISPLAY THE LED FOR SUBMITTED VALUE
0053 3143             78             ACALL BUZZER_ON                           ; BUZZ AND DELAY
                      79     
                      80         ; CHECK IF INDEX IS 4
0055 0530             81         INC INDEX
0057 E530             82         MOV A, INDEX
0059 B404CA           83         CJNE A, #4, LOOP              ; IF NOT, GO BACK TO LOOP
                      84     
                      85         ; COMPARISON OF ENTERED NUMBERS WITH PASSWORD (1, 1, 1, 1)
                      86         ; CONVERT 7-SEGMENT CODES TO ASCII
005C 11BC             87         ACALL SEG_TO_ASCII
                      88     
                      89         ; TRANSMIT "****" AS STRING OVER UART
005E 759920           90         MOV SBUF, #32                 ; SEND SPACE CHARACTER
0061 313D             91         ACALL WAIT_UART
                      92     
0063 EB               93         MOV A, R3                     ; SEND 1 OVER UART
0064 F599             94         MOV SBUF, A
0066 313D             95         ACALL WAIT_UART
                      96     
0068 EA               97         MOV A, R2                     ; SEND 2 OVER UART
0069 F599             98         MOV SBUF, A
006B 313D             99         ACALL WAIT_UART
                     100     
006D E9              101         MOV A, R1                     ; SEND 3 OVER UART
006E F599            102         MOV SBUF, A
0070 313D            103         ACALL WAIT_UART
                     104             
0072 E8              105         MOV A, R0                     ; SEND 4 OVER UART
0073 F599            106         MOV SBUF, A
0075 313D            107         ACALL WAIT_UART
                     108     
                     109         ; CHECK EACH REGISTER AGAINST PASSWORD "1000"
0077 EB              110         MOV A, R3
0078 B43118          111         CJNE A, #'1', INCORRECT
007B EA              112         MOV A, R2
007C B43014          113         CJNE A, #'0', INCORRECT
007F E9              114         MOV A, R1
0080 B43010          115         CJNE A, #'0', INCORRECT
0083 E8              116         MOV A, R0
0084 B4300C          117         CJNE A, #'0', INCORRECT
                     118             
0087                 119             CORRECT:
0087 C2A7            120                     CLR LED_RED                  ; TURN OFF RED LED
0089 D2A6            121                     SETB LED_GREEN               ; TURN ON GREEN LED
008B 3143            122                     ACALL BUZZER_ON
008D 3143            123                     ACALL BUZZER_ON
A51 MACRO ASSEMBLER  MAIN                                                                 11/09/2024 21:00:00 PAGE     3

008F 3143            124                     ACALL BUZZER_ON
0091 800A            125                     SJMP RESET
0093                 126             INCORRECT:
0093 C2A6            127                     CLR LED_GREEN                ; TURN OFF GREEN LED
0095 D2A7            128                     SETB LED_RED                 ; TURN ON RED LED
0097 3143            129                     ACALL BUZZER_ON
0099 3143            130                     ACALL BUZZER_ON
009B 8000            131                     SJMP RESET
009D                 132             RESET:
009D 753000          133                     MOV INDEX, #0                ; RESET INDEX FOR NEXT ENTRY
00A0 0111            134                     AJMP INIT                    ; RESTART PROGRAM
                     135                     
                     136     ; SUBROUTINE DEFINE HERE
                     137     
00A2                 138     CHECK_INDEX:
                     139         ; Compare index with 0
00A2 E530            140         MOV A, index            ; Load the value of index into the accumulator
00A4 B40003          141         CJNE A, #0, CHECK_1L     ; If index ? 0, jump to CHECK_1
00A7 C292            142         CLR P1.2               ; Set P1.2 if index = 0
00A9 22              143         RET                     ; Return from subroutine
00AA                 144             CHECK_1L:
00AA B40103          145                     CJNE A, #1, CHECK_2L     ; If index ? 1, jump to CHECK_2
00AD C293            146                     CLR P1.3               ; Set P1.3 if index = 1
00AF 22              147                     RET                     ; Return from subroutine
00B0                 148             CHECK_2L:
00B0 B40203          149                     CJNE A, #2, CHECK_3L     ; If index ? 2, jump to CHECK_3
00B3 C294            150                     CLR P1.4               ; Set P1.4 if index = 2
00B5 22              151                     RET                     ; Return from subroutine
00B6                 152             CHECK_3L:
00B6 B40302          153                     CJNE A, #3, END_CHECKL   ; If index ? 3, jump to END_CHECK
00B9 C295            154                     CLR P1.5               ; Set P1.5 if index = 3
00BB                 155             END_CHECKL:
00BB 22              156                     RET                     ; Return from subroutine
                     157     
00BC                 158     SEG_TO_ASCII:
00BC E8              159         MOV A, R0
00BD 11CD            160         ACALL CONVERT_DIGIT
00BF F8              161         MOV R0, A
                     162     
00C0 E9              163         MOV A, R1
00C1 11CD            164         ACALL CONVERT_DIGIT
00C3 F9              165         MOV R1, A
                     166     
00C4 EA              167         MOV A, R2
00C5 11CD            168         ACALL CONVERT_DIGIT
00C7 FA              169         MOV R2, A
                     170     
00C8 EB              171         MOV A, R3
00C9 11CD            172         ACALL CONVERT_DIGIT
00CB FB              173         MOV R3, A
00CC 22              174         RET
                     175     
00CD                 176             CONVERT_DIGIT:
00CD B4C003          177                             CJNE A, #0C0H, CHECK_1
00D0 7430            178                             MOV A, #'0'
00D2 22              179                             RET
00D3                 180                     CHECK_1:
00D3 B4F903          181                             CJNE A, #0F9H, CHECK_2
00D6 7431            182                             MOV A, #'1'
00D8 22              183                             RET
00D9                 184                     CHECK_2:
00D9 B4A403          185                             CJNE A, #0A4H, CHECK_3
00DC 7432            186                             MOV A, #'2'
00DE 22              187                             RET
00DF                 188                     CHECK_3:
00DF B4B003          189                             CJNE A, #0B0H, CHECK_4
A51 MACRO ASSEMBLER  MAIN                                                                 11/09/2024 21:00:00 PAGE     4

00E2 7433            190                             MOV A, #'3'
00E4 22              191                             RET
00E5                 192                     CHECK_4:
00E5 B49903          193                             CJNE A, #099H, CHECK_5
00E8 7434            194                             MOV A, #'4'
00EA 22              195                             RET
00EB                 196                     CHECK_5:
00EB B49203          197                             CJNE A, #092H, CHECK_6
00EE 7435            198                             MOV A, #'5'
00F0 22              199                             RET
00F1                 200                     CHECK_6:
00F1 B48203          201                             CJNE A, #082H, CHECK_7
00F4 7436            202                             MOV A, #'6'
00F6 22              203                             RET
00F7                 204                     CHECK_7:
00F7 B4F803          205                             CJNE A, #0F8H, CHECK_8
00FA 7437            206                             MOV A, #'7'
00FC 22              207                             RET
00FD                 208                     CHECK_8:
00FD B48003          209                             CJNE A, #080H, CHECK_9
0100 7438            210                             MOV A, #'8'
0102 22              211                             RET
0103                 212                     CHECK_9:
0103 B49003          213                             CJNE A, #090H, ERROR
0106 7439            214                             MOV A, #'9'
0108 22              215                             RET
0109                 216                     ERROR:
0109 743F            217                             MOV A, #'?'
010B 22              218                             RET
                     219                             
                     220     ;===============================================================
                     221     ; Subroutine: RECEIVE_DATA
                     222     ; Purpose: Receives a string, detects "Pxxxx" format, and echoes it
                     223     ;===============================================================
010C                 224     RECEIVE_DATA:
                     225         ; Wait to receive 'P' character
010C 3120            226         ACALL RECEIVE_CHAR     ; Get character from UART
010E B450FB          227         CJNE A, #'P', RECEIVE_DATA ; If not 'P', keep waiting
                     228         
                     229         ; 'P' detected, proceed to receive next 4 characters
0111 3120            230         ACALL RECEIVE_CHAR     ; Get first number
0113 F8              231         MOV R0, A              ; Store in R0
0114 3120            232         ACALL RECEIVE_CHAR     ; Get second number
0116 F9              233         MOV R1, A              ; Store in R1
0117 3120            234         ACALL RECEIVE_CHAR     ; Get third number
0119 FA              235         MOV R2, A              ; Store in R2
011A 3120            236         ACALL RECEIVE_CHAR     ; Get fourth number
011C FB              237         MOV R3, A              ; Store in R3
                     238     
                     239         ; Send back received numbers over UART
011D 3128            240         ACALL SEND_RESPONSE
                     241             
011F 22              242         RET                    ; Return to MAIN loop
                     243             ;===============================================================
                     244             ; Subroutine: RECEIVE_CHAR
                     245             ; Purpose: Waits until a character is received in UART and loads it into A
                     246             ;===============================================================
0120                 247             RECEIVE_CHAR:
0120 3098FD          248                     JNB RI, RECEIVE_CHAR   ; Wait until a character is received
0123 E599            249                     MOV A, SBUF            ; Move received byte to Accumulator
0125 C298            250                     CLR RI                 ; Clear RI for next reception
0127 22              251                     RET
                     252                     
                     253     ;===============================================================
                     254     ; Subroutine: SEND_RESPONSE
                     255     ; Purpose: Sends R0-R3 content back over UART as ASCII characters
A51 MACRO ASSEMBLER  MAIN                                                                 11/09/2024 21:00:00 PAGE     5

                     256     ;===============================================================
0128                 257             SEND_RESPONSE:
0128 E8              258                     MOV A, R0              ; Load first digit
0129 3135            259                     ACALL SEND_CHAR        ; Send character
012B E9              260                     MOV A, R1              ; Load second digit
012C 3135            261                     ACALL SEND_CHAR        ; Send character
012E EA              262                     MOV A, R2              ; Load third digit
012F 3135            263                     ACALL SEND_CHAR        ; Send character
0131 EB              264                     MOV A, R3              ; Load fourth digit
0132 3135            265                     ACALL SEND_CHAR        ; Send character
0134 22              266                     RET
                     267             ;===============================================================
                     268             ; Subroutine: SEND_CHAR
                     269             ; Purpose: Sends character in A over UART
                     270             ;===============================================================
0135                 271                     SEND_CHAR:
0135 F599            272                             MOV SBUF, A            ; Load A into SBUF to transmit
0137 3099FD          273                             JNB TI, $              ; Wait for transmission to complete
013A C299            274                             CLR TI                 ; Clear transmit interrupt flag
013C 22              275                             RET
                     276             
013D                 277     WAIT_UART:
013D 3099FD          278             JNB TI, WAIT_UART
0140 C299            279             CLR TI
0142 22              280             RET
                     281             
0143                 282     BUZZER_ON:
0143 D2A4            283             SETB BUZZER
0145 314C            284             ACALL DELAY_B
0147 C2A4            285             CLR BUZZER
0149 314C            286             ACALL DELAY_B
014B 22              287             RET
                     288             
014C                 289     DELAY_B:
014C 7F02            290                     MOV R7, #2                      ; (1/20)*1 ms
014E 7EFA            291             DB1:MOV R6, #250
0150 7DFA            292             DB2:MOV R5, #250
0152 DDFE            293             DB3:DJNZ R5, DB3
0154 DEFA            294                     DJNZ R6, DB2
0156 DFF6            295                     DJNZ R7, DB1
0158 22              296                     RET
                     297     
0159                 298     DELAY:
0159 7F04            299                     MOV R7, #4                      ; (4/20)*1 ms
015B 7EFA            300             D1: MOV R6, #250
015D 7DFA            301             D2: MOV R5, #250
015F DDFE            302             D3: DJNZ R5, D3
0161 DEFA            303                     DJNZ R6, D2
0163 DFF6            304                     DJNZ R7, D1
0165 22              305                     RET
                     306     
                     307     ; 7-SEGMENT DISPLAY DATA FOR DIGITS 0-9
0166                 308     MA7SEG:
0166 C0F9A4B0        309         DB 0C0H, 0F9H, 0A4H, 0B0H, 099H, 092H, 082H, 0F8H, 080H, 090H
016A 999282F8                
016E 8090                    
                     310     END
A51 MACRO ASSEMBLER  MAIN                                                                 11/09/2024 21:00:00 PAGE     6

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

BUTTON1. . . . . .  B ADDR   00B0H.2 A   
BUTTON2. . . . . .  B ADDR   00B0H.3 A   
BUZZER . . . . . .  B ADDR   00A0H.4 A   
BUZZER_ON. . . . .  C ADDR   0143H   A   
CHECK_1. . . . . .  C ADDR   00D3H   A   
CHECK_1L . . . . .  C ADDR   00AAH   A   
CHECK_2. . . . . .  C ADDR   00D9H   A   
CHECK_2L . . . . .  C ADDR   00B0H   A   
CHECK_3. . . . . .  C ADDR   00DFH   A   
CHECK_3L . . . . .  C ADDR   00B6H   A   
CHECK_4. . . . . .  C ADDR   00E5H   A   
CHECK_5. . . . . .  C ADDR   00EBH   A   
CHECK_6. . . . . .  C ADDR   00F1H   A   
CHECK_7. . . . . .  C ADDR   00F7H   A   
CHECK_8. . . . . .  C ADDR   00FDH   A   
CHECK_9. . . . . .  C ADDR   0103H   A   
CHECK_INDEX. . . .  C ADDR   00A2H   A   
CONVERT_DIGIT. . .  C ADDR   00CDH   A   
CORRECT. . . . . .  C ADDR   0087H   A   
D1 . . . . . . . .  C ADDR   015BH   A   
D2 . . . . . . . .  C ADDR   015DH   A   
D3 . . . . . . . .  C ADDR   015FH   A   
DATA_7SEG. . . . .  D ADDR   0080H   A   
DB1. . . . . . . .  C ADDR   014EH   A   
DB2. . . . . . . .  C ADDR   0150H   A   
DB3. . . . . . . .  C ADDR   0152H   A   
DELAY. . . . . . .  C ADDR   0159H   A   
DELAY_B. . . . . .  C ADDR   014CH   A   
END_CHECKL . . . .  C ADDR   00BBH   A   
ERROR. . . . . . .  C ADDR   0109H   A   
INCORRECT. . . . .  C ADDR   0093H   A   
INCREMENT_DISPLAY.  C ADDR   0031H   A   
INDEX. . . . . . .  N NUMB   0030H   A   
INIT . . . . . . .  C ADDR   0011H   A   
LED1 . . . . . . .  B ADDR   00A0H.2 A   
LED2 . . . . . . .  B ADDR   00A0H.3 A   
LED_GREEN. . . . .  B ADDR   00A0H.6 A   
LED_RED. . . . . .  B ADDR   00A0H.7 A   
LOOP . . . . . . .  C ADDR   0026H   A   
MA7SEG . . . . . .  C ADDR   0166H   A   
MAIN . . . . . . .  C ADDR   0000H   A   
P0 . . . . . . . .  D ADDR   0080H   A   
P1 . . . . . . . .  D ADDR   0090H   A   
P2 . . . . . . . .  D ADDR   00A0H   A   
P3 . . . . . . . .  D ADDR   00B0H   A   
RECEIVE_CHAR . . .  C ADDR   0120H   A   
RECEIVE_DATA . . .  C ADDR   010CH   A   
RESET. . . . . . .  C ADDR   009DH   A   
RI . . . . . . . .  B ADDR   0098H.0 A   
SAVE_NUMBER. . . .  C ADDR   0042H   A   
SBUF . . . . . . .  D ADDR   0099H   A   
SCON . . . . . . .  D ADDR   0098H   A   
SEG_TO_ASCII . . .  C ADDR   00BCH   A   
SEND_CHAR. . . . .  C ADDR   0135H   A   
SEND_RESPONSE. . .  C ADDR   0128H   A   
TH1. . . . . . . .  D ADDR   008DH   A   
TI . . . . . . . .  B ADDR   0098H.1 A   
TMOD . . . . . . .  D ADDR   0089H   A   
TR1. . . . . . . .  B ADDR   0088H.6 A   
UART_BUFFER. . . .  C ADDR   0000H   A   
A51 MACRO ASSEMBLER  MAIN                                                                 11/09/2024 21:00:00 PAGE     7

WAIT_UART. . . . .  C ADDR   013DH   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
