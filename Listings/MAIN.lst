A51 MACRO ASSEMBLER  MAIN                                                                 11/07/2024 10:35:10 PAGE     1


MACRO ASSEMBLER A51 V8.2.7.0
OBJECT MODULE PLACED IN .\Objects\MAIN.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE MAIN.A SET(SMALL) DEBUG PRINT(.\Listings\MAIN.lst) OBJECT(.\Objects\MAI
                      N.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ; Define constants and data segments
  0080                 2     data_7seg equ p0             ; 7-segment display connected to Port 0
  00A2                 3     led1 bit p2.2                ; LED1 control bit
  00A3                 4     led2 bit p2.3                ; LED2 control bit for disabling 2nd 7-seg
  00B2                 5     button1 bit p3.2             ; Button 1 input on Port 3.2
  00B3                 6     button2 bit p3.3             ; Button 2 input on Port 3.3
                       7     
                       8     ; Start of the program
0000                   9     org 00h
0000                  10     main: 
0000 90003E           11         mov dptr, #ma7seg        ; Initialize DPTR with the address of ma7seg
0003 C2A3             12         clr led2                 ; Disable 7-segment display #2 (if dual-display setup)
0005 E4               13         clr a                    ; Clear accumulator
0006 758000           14         mov data_7seg, #0        ; Display initial value (8.) on 7-segment
0009 D2B2             15         setb button1             ; Set button 1 as input (high state by default)
000B D2B3             16         setb button2             ; Set button 2 as input (high state by default)
000D 8000             17         sjmp loop                ; Jump to loop
                      18     
000F                  19     loop:
000F 30B205           20         jnb button1, increment_led1 ; If button 1 is pressed, jump to increment_led1
0012 30B311           21         jnb button2, increment_led2 ; If button 2 is pressed, jump to increment_led2
0015 80F8             22         sjmp loop                   ; Otherwise, keep looping
                      23     
0017                  24     increment_led1:
0017 1131             25         call delay                 ; Call delay subroutine for debouncing
0019 E4               26         clr a                      ; Clear accumulator
001A 93               27         movc a, @a+dptr            ; Load the next pattern from ma7seg
001B F580             28         mov data_7seg, a 
001D A3               29         inc dptr                   ; Increment DPTR to point to the next value
001E B490EE           30         cjne a, #0x90, loop        ; If the value is not 0x90 (9), go back to loop
0021 90003E           31         mov dptr, #ma7seg          ; Reset DPTR to the start of ma7seg after reaching 9
0024 80E9             32         sjmp loop                  ; Go back to loop
                      33     
0026                  34     increment_led2:
0026 1131             35         call delay                 ; Call delay subroutine for debouncing
0028 E4               36         clr a                      ; Clear accumulator
0029 90003E           37             mov dptr, #ma7seg          ; Reset DPTR to the start of ma7seg after reaching 9
002C 93               38             movc a, @a+dptr            ; Load the next pattern from ma7seg
002D F580             39         mov data_7seg, a           ; Display the next value on 7-segment
002F 80DE             40         sjmp loop                  ; Return to the main loop
                      41     
                      42     ; Delay subroutine
0031                  43     delay:
0031 7F04             44         mov r7, #4                ; Outer loop count (20 * 50ms = 1 second)
0033 7EFA             45     d1: mov r6, #250              ; Inner loop count
0035 7DFA             46     d2: mov r5, #250              ; Innermost loop count
0037 DDFE             47     d3: djnz r5, d3               ; Decrement R5 until it reaches 0
0039 DEFA             48         djnz r6, d2               ; Decrement R6 until it reaches 0
003B DFF6             49         djnz r7, d1               ; Decrement R7 until it reaches 0
003D 22               50         ret                       ; Return from subroutine
                      51     
                      52     ; 7-segment display data for digits 0-9
003E                  53     ma7seg:
003E C0F9A4B0         54         db 0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90
0042 999282F8                
0046 8090                    
                      55     
A51 MACRO ASSEMBLER  MAIN                                                                 11/07/2024 10:35:10 PAGE     2

                      56     end
A51 MACRO ASSEMBLER  MAIN                                                                 11/07/2024 10:35:10 PAGE     3

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

BUTTON1. . . . . .  B ADDR   00B0H.2 A   
BUTTON2. . . . . .  B ADDR   00B0H.3 A   
D1 . . . . . . . .  C ADDR   0033H   A   
D2 . . . . . . . .  C ADDR   0035H   A   
D3 . . . . . . . .  C ADDR   0037H   A   
DATA_7SEG. . . . .  D ADDR   0080H   A   
DELAY. . . . . . .  C ADDR   0031H   A   
INCREMENT_LED1 . .  C ADDR   0017H   A   
INCREMENT_LED2 . .  C ADDR   0026H   A   
LED1 . . . . . . .  B ADDR   00A0H.2 A   
LED2 . . . . . . .  B ADDR   00A0H.3 A   
LOOP . . . . . . .  C ADDR   000FH   A   
MA7SEG . . . . . .  C ADDR   003EH   A   
MAIN . . . . . . .  C ADDR   0000H   A   
P0 . . . . . . . .  D ADDR   0080H   A   
P2 . . . . . . . .  D ADDR   00A0H   A   
P3 . . . . . . . .  D ADDR   00B0H   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
